function [y1] = flex_index_y(x1)
%FLEX_INDEX_Y neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 16:02:39.
% 
% [y1] = flex_index_y(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Layer 1
b1 = [3.8857079145800197395;-3.4379848003865012274;1.8147764947700553151;1.2761650961651138658;0.46919683426149183525;-0.30955517337441279535;0.99927101023997610962;-3.2896675025477621901;2.0396818397068678941;3.7902832767768401823];
IW1_1 = [-3.6840876806325275616;3.7390649917654119605;-4.3653360528689137965;-4.5472291011248850978;-4.9053382159898664128;-4.7889857455525950414;4.3663551109965581531;-5.5241915011042586059;3.7276116916809893809;3.928351331523296075];

% Layer 2
b2 = -0.32337668158510296523;
LW2_1 = [-0.12121505531383983123 -0.36450335434742764384 0.3423502796730375497 -0.7194567865934313744 1.3008426758330831063 -1.1521805813344312419 -0.80967240022125230858 0.95806094786449180756 1.3389649100254399361 -0.22038878577080189824];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.124714715389344;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
