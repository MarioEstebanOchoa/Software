function [y1] = flex_thumb_x(x1)
%FLEX_THUMB_X neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 17:36:43.
% 
% [y1] = flex_thumb_x(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [55.0872957664198;27.1156434515906];
x1_step1.gain = [0.137170066897646;0.347969480641399];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.11187464732794229205;-0.11188073416904489865;-0.11188424456255427475;-0.11187714481584017101;-0.11188447089500243303;-0.10239549497269304079;-0.11187622304113237215;-0.19517837106577723416;-1.3814234266142764174;-0.11188005562518557601];
IW1_1 = [-0.16676985304573410662 0.25785734420624067953;0.16668426269489713953 -0.25771211870447247039;0.16663250464585979693 -0.25762440565671779202;0.16673533699644799144 -0.25779875205219704437;0.1666291022332835603 -0.25761864246727905758;0.13288819161691151072 -0.20637347645919909556;0.16674817053866541894 -0.25782053311750940949;-1.5929320567239246831 0.38449288124559533042;-0.55409099628292857176 -1.0913792114545768364;0.16669405616403840109 -0.25772872447597927614];

% Layer 2
b2 = 0.52856240819571853606;
LW2_1 = [0.3635284481976405746 -0.36331663287383442196 -0.36318857145520083707 -0.36344302264751687792 -0.36318015381748669501 -0.28388938813329478439 -0.36347478398599253335 -1.1438316382129316562 1.2254230096939817685 -0.3633408664980623537];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0665354379391824;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
