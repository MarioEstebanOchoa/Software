function [y1] = flex_index_x(x1)
%FLEX_INDEX_X neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 16:02:38.
% 
% [y1] = flex_index_x(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Layer 1
b1 = [0.0052154643694849803226;-0.34046412647047885613;0.017761801276585838238;-0.050215006863132578829;0.67711926067112004901];
IW1_1 = [0.53747414533088955224;-1.7457401130591372329;-0.060280802981865021228;0.17869113965101654506;0.97465396216392574669];

% Layer 2
b2 = 0.5392724263013941588;
LW2_1 = [-0.78553521261957548472 -0.62496877351296342695 0.063010349183402633577 -0.19046718153038466603 -1.2055182717095680456];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.327151938288209;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
