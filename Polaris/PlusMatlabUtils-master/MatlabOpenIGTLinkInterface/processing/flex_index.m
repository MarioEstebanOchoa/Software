function [y1] = flex_index(x1)
%FLEX_INDEX neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 16:02:43.
% 
% [y1] = flex_index(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.3744602336188345149;2.1367724908928189542;-1.3042443547693207684;-0.59746254700439394014;0.42807213698106588717;0.34865022343315060782;1.2710325355853875351;-2.2462521966039847854;-2.0844256988961338273;-2.404843740901080551];
IW1_1 = [2.0716995241618216816;-2.5411688156087754997;2.6887734977055917085;2.597247704160801085;-2.9804819571731053784;2.7902637572829953605;3.2514416704547572934;-3.7072951700959371202;-2.3953122494208245463;-2.0458443323244468459];

% Layer 2
b2 = [0.34105370531754264363;-0.34404484189769152236;0.47934470814409080308];
LW2_1 = [-0.12529863254475354095 0.2998942575934357424 0.27491880714045263678 -0.18559568042705659741 0.066256740381382656091 0.097619614712239094478 -0.12171266716323940471 -0.080900457693712568563 0.56020094006949328058 0.11975512098993901233;0.21878127044039791249 0.85458377437170984781 0.65014780089190227219 -0.10088480037994067284 0.7440403389902240372 0.27993433888582419655 0.16665387223918909365 0.46308247958721288073 -0.50980815466601292485 0.4089994537927710283;0.19604885541239600033 -0.31121768255684645332 -0.5795929073629544348 0.35723471218258767701 -0.3007058169476745646 0.34952144069202256693 -0.97199637323152754398 -1.3383124504933348042 0.46429650607689992858 0.13723455675132928411];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.327151938288209;0.124714715389344;0.141326247237917];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
