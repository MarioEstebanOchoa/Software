function [y1] = flex_index_z(x1)
%FLEX_INDEX_Z neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 16:02:40.
% 
% [y1] = flex_index_z(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Layer 1
b1 = [1.3521240098051430234;-1.248158278090521156;0.61291016348026050586;0.51699372975168611521;-0.024920730496431096196;1.0233040391960543936;-2.5397222005656456822;-1.6335646783885924282;-0.90719758684535267701;-1.7323497106798477763];
IW1_1 = [-1.2292483837540466585;1.1242209365586528502;-1.0844016211825491247;-1.3984804364790812681;2.5850715941983697377;1.9521683905549511717;-3.9850637577405967349;-0.096565542633979803422;-1.8531828720297773838;-0.3013356188922037826];

% Layer 2
b2 = -0.042226501497051691092;
LW2_1 = [-0.66434283056322274152 0.54930745300151695432 0.23091955965587721011 0.80048093159383337802 1.2122242086865540056 -1.5202996514811975004 -1.4560623633413356526 -0.17567258114832395854 0.33693556533650609319 -0.67668785447662338495];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.141326247237917;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
