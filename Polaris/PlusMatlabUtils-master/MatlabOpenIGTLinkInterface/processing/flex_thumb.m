function [y1] = flex_thumb(x1)
%FLEX_THUMB neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 17:36:46.
% 
% [y1] = flex_thumb(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [55.0872957664198;27.1156434515906];
x1_step1.gain = [0.137170066897646;0.347969480641399];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.66376262416957676482;-1.6657438815406881982;0.87000205369941874256;1.1935419766651491624;0.52065070634540155936;-1.4837972045839336044;0.85190623925360076107;-3.3861609027846486519;-1.0046501265572336248;0.53259601547238411001];
IW1_1 = [0.56940239718110730038 0.83736741462098596145;1.4967597255843285708 -2.653518504743607842;0.89100983813646372766 3.1771951240421194562;-4.1416241304779815025 0.90467306869749208875;-2.9202061175897391365 -0.48865609752053551507;0.63014767815751138169 2.1966206744694760644;2.3437805956637642879 -1.1472833924174554721;-2.4913739862974089156 -2.5476780158485357042;1.5020865576058346491 -0.70904673133465956347;1.9152400809104996871 -3.6711760131660895468];

% Layer 2
b2 = [-0.99458251329736824253;0.40857471688379021213;-0.77790092387370124438];
LW2_1 = [1.9205312807021461818 -1.4671706585602091177 -0.94232142637089821857 -1.1555036530778948212 1.3558866646972000947 -1.3448562193034472312 1.773724602377369175 1.5264242648935244517 1.1107819544801993406 -1.2553629519775784118;-0.82439941171178177104 1.1939589950982407718 0.57847261456091725318 1.0162734294031603444 -1.2341864676455189809 0.82037216104336929678 -1.5010925586492882555 -1.0571542215201721326 -1.299405699103368006 0.97161824754537129412;-0.38910474211941231681 0.082043087336528042197 0.13936536608631175382 -0.36644373296533427897 -0.23570536570113301278 0.0879881859851941589 -0.41777364654647330955 -0.42073775747711961159 -1.6463887034096376105 0.15072989764070465757];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0665354379391824;0.135326913911388;0.239879029576595];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
