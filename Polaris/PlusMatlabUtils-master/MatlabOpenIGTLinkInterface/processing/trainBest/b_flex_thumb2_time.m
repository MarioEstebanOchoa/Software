function [y1,xf1,xf2] = flex_thumb2_time(x1,x2,xi1,xi2)
%FLEX_THUMB2_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 06-Aug-2019 18:34:09.
% 
% [y1,xf1,xf2] = flex_thumb2_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 2x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 2x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [54.1456658513089;24.0901771095534];
x1_step1.gain = [0.133501559733848;0.276283784897628];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.0828349347333359;0.134107971720735;0.140835730137886];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.014656767793274339678;0.5846556207896766999;0.4175421292299675291];
IW1_1 = [0.010005893248886670033 0.33960047704406343128 -0.011961086580678598201 -0.26995893772717877157;0.29549077424316422258 0.38925613654414797926 0.090174994197826457976 -0.16990754032200924839;-0.75794332334622627201 0.23362974212927925532 0.57554862998219713521 -0.1391595728455829184];
IW1_2 = [1.1106515965447587568 0.25165046751828185068 0.57815995501560535352 -0.33386237868097590198 -0.13865474717873038646 -0.19144364713902264907;0.77580324820278379061 0.84969935599100832047 -1.5547678175512775756 -0.44727425404221410332 -0.323907777154932075 0.70827636778806457585;1.2925942933290250902 1.4122256488329778534 -0.67767438173689897862 -0.62434644420710161405 -0.46122243055019152003 0.43220162599371975132];

% Layer 2
b2 = [-0.0032514435980829188219;-0.16885105352718074445;0.067525487975117856609];
LW2_1 = [1.0394382606265852864 0.64567181632665704427 -0.42795572446723811888;-0.61868666001234495777 -0.78298234094591245835 1.1520010573967609524;0.37002446583068132613 -1.0826266823245644932 0.57035279047874687386];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0828349347333359;0.134107971720735;0.140835730137886];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
