function [y1,xf1,xf2] = flex_thumb1_time(x1,x2,xi1,xi2)
%FLEX_THUMB1_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 06-Aug-2019 18:29:44.
% 
% [y1,xf1,xf2] = flex_thumb1_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 2x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 2x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [60.8130784974971;25.2412311108327];
x1_step1.gain = [0.29545284613632;0.360525657080737];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.0752680072922734;0.12523904127463;0.127180187670208];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.36292695150027665107;-0.64521759699557090784;-0.12326671593007394734];
IW1_1 = [-1.0282239095808425322 -0.83296801013217858234 0.48910041001415327511 0.64523294206652725968;-0.70382920257210712656 -0.61429339492376855425 0.43900598719940708836 0.3936315025299889081;0.33690450801808574655 -0.14831741507979601113 -0.1615925968606797547 0.027360600733898583076];
IW1_2 = [-0.68801645455368221072 0.4790658541011143523 -0.0056037219569663957591 0.22063837780303419134 0.19118336499096572068 -0.21988489650041456724;-0.5919037626916077155 -0.0062300317670745666496 0.098605468889475411665 0.16145653043572427698 0.303651974324143481 -0.076270414086328869319;-0.57222253607023809696 -0.49657779321102962777 -0.30631315529322200586 -0.14178147729569967606 -0.14735335163958551696 0.091851264618589140154];

% Layer 2
b2 = [-0.15936549032510030632;-0.10167016502900710906;0.093701115373282545251];
LW2_1 = [-0.66346680917268685551 -0.54698132197847504354 -0.68870222742717657205;0.92095195567285181859 0.039711093795779500715 0.075651596677778099043;0.10344686084727104658 0.99258040997619445545 -0.4452302027993293998];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0752680072922734;0.12523904127463;0.127180187670208];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
