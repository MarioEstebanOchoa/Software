function [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2)
%FLEX_INDEX_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 06-Aug-2019 17:55:52.
% 
% [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.327151938288209;0.124714715389344;0.141326247237917];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.45854055492401568639;0.013110571880324968855;0.57861616901430279469;0.56571470636510179375];
IW1_1 = [-1.416895475387308867 1.0240664721208618815;0.27817531939636158667 -0.18696327504530216301;0.99421780125499503722 -0.78294477477925861209;0.32885134990492537188 -0.16009217498903050014];
IW1_2 = [1.2574061775730396295 -0.18293768294954768083 0.42259068389009690758 -0.94692031405919308007 0.32770902626777848043 -0.47196278291033061381;-0.74863384885541683911 -0.33702809031544295193 -0.40985290947752472945 0.15780394093427518865 -0.16964642616738151437 -0.014246857236529388013;-0.30648961422333120819 -0.75029132098320039379 -1.2043535799151257049 0.38101052728250967006 -0.33711734218939715113 0.3043119009945796094;1.3750124758308324147 -0.92530801272441254302 0.070639976643055130134 -0.82553566557913204971 -0.15654780908088780644 -0.29161216793939048753];

% Layer 2
b2 = [-0.17770761378505636752;0.37044633055616799089;-0.29969973538274868874];
LW2_1 = [0.33315775928499263836 -1.0917005483006398947 0.41334192398999153317 0.27601618552367052084;0.49713481272598603056 -0.48028073811902510792 0.55035186288502968566 -1.1704895304524594035;-1.2876920574663131003 0.030760859099509367531 -1.2871644486249247397 1.1689061829121831781];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.327151938288209;0.124714715389344;0.141326247237917];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
