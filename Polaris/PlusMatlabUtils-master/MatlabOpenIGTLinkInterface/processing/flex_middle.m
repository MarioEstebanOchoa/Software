function [y1] = flex_middle(x1)
%FLEX_MIDDLE neural network simulation function.
%
% Auto-generated by MATLAB, 08-Aug-2019 10:16:42.
% 
% [y1] = flex_middle(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 59.8362059788327;
x1_step1.gain = 0.155349197573605;
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.406637853324644194;-2.8085072584749246616;1.4892276995377369264;0.71396042339520793263;0.57584678643442355206;1.2718973514496607624;-2.0507598645310158858;-2.2150553785286559716;-5.6805384873327939843;3.383128797248553532];
IW1_1 = [2.2862753056275004759;3.1459801301225600589;-2.5935191265773243074;-2.188766780861891359;-2.7644856937131274677;2.8497935118444264191;-2.5644173470437618967;-3.2802934918925856778;-7.4889529424425251847;4.0591078344944646616];

% Layer 2
b2 = [-0.77056245090295028;-0.5025651154681607391;0.80243520415700431148];
LW2_1 = [0.34217744198317179283 -0.90620198041375532583 -0.301550359865188633 -0.2869955270724471319 0.36666642335471877345 0.024860003691511874113 -0.24299558666799220275 0.53117214529679168677 1.2581538127058027321 1.9467347316256797818;-0.82188545752283603818 -1.2382199078230149425 -1.0461035921142551874 0.10423817670561295878 0.19634503876774250797 0.65379907190910746539 1.3132372780682652902 -0.14179461003255616758 -1.7040262326958215411 -1.7717191132467187131;-0.0184728272479029558 0.67697287771524716771 -0.072375371690087147991 0.35076727047079703237 -0.12361562179535361128 0.98745400634421076624 0.29326302748526078545 1.0174186009882750792 -1.3991941631437774252 -1.0564559551005245908];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.215308210362026;0.200743637827004;0.0897665629343387];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
