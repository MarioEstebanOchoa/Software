function [y1] = flex_thumb(x1)
%FLEX_THUMB neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 20:54:56.
% 
% [y1] = flex_thumb(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [52.4964427338317;33.7437982467825];
x1_step1.gain = [0.116423921759623;0.149465087282209];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.571090276599412805;-0.23997427832944226433;0.93038155809567779642;-0.79927282215804829058;1.3483489638542840439;-0.15088220967195589695;-1.0339311875561620901;3.117554926229434642;0.86890907629822100589;-1.255562040689731873];
IW1_1 = [-1.0476521100194691183 -0.67977605833140419822;1.3082698668820635923 3.04213001381073056;-1.7380314675996348939 -0.40328862928090875029;-7.186449002469760039 -1.8571493637596427906;-7.266958818645537832 -2.6042448724552649253;4.1661992674639787282 1.1636728516279568613;1.6059868556821101926 -0.5244279542408560868;-3.6834136763188176644 1.6751030320027839871;1.2400220379909869806 -2.4443964305160648109;-0.64326516569485725494 2.889102240786411091];

% Layer 2
b2 = [-0.20873432630857211012;0.77344869752863132373;0.81084754982497320164];
LW2_1 = [-0.46434610219256333696 0.64697006659997735589 -0.74442727570488120836 -1.8429040278686397158 -2.1491440683114158006 -4.2654694052137491767 -0.6595692031189350768 0.35717473609825872716 -0.061648404292478926891 -0.324990538036660781;0.71831297040106611984 -0.41886191709307146747 0.16662768705655295332 0.99824271384598539658 1.1199660518601197712 2.2227652531999568808 -0.58667634983985395003 -1.472488741547551605 -0.022148910574531877754 0.37477521346366654553;1.062113460410424981 -0.44719556107294228253 -0.79143455710901133848 0.73917692687007086061 0.81900288583169900125 1.576144628984599505 -1.3121987261961136628 -2.0699402534457806979 0.49357951209469103082 1.1151320616151509935];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0388481887614866;0.10232698685259;0.0460379609362146];
y1_step1.xoffset = [20.8867392410723;64.4799632124609;-42.5455437206748];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
