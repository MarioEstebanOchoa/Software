function [y1] = flex_thumb_y(x1)
%FLEX_THUMB_Y neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 20:54:52.
% 
% [y1] = flex_thumb_y(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [52.4964427338317;33.7437982467825];
x1_step1.gain = [0.116423921759623;0.149465087282209];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.020220663956417667118;-0.020242338244278557796;0.02026086623398479572;-0.04417761915347383217;0.25270796253242600038;-0.020243938815326985997;-0.020210276745741388021;0.020247275666929642063;-0.019919655642611416857;0.020211804908146408649];
IW1_1 = [-0.042532665351487870808 -0.019487771443671472044;-0.042578326305393730811 -0.019508499931566950641;0.042617363808326681751 0.019526207422690018689;1.2112013159598897794 -0.42800721639488703563;-0.32656402865527422996 1.213587748994561677;-0.042581694525160043718 -0.019510039805083360942;-0.042510771285057619151 -0.019477865928209412566;0.042588727411706266135 0.01951322313905589495;-0.041900552080872975613 -0.019194898413519418529;0.042514193988116164014 0.019478822551388039197];

% Layer 2
b2 = 0.3986812952467976845;
LW2_1 = [-0.051194515629332103257 -0.051143645314151033043 0.051096387425352704503 -1.0707366855434230501 -0.654384832010773132 -0.051142804298188800083 -0.05122797191901465319 0.051132460058889987742 -0.050287700143076145831 0.051063336576836454439];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.10232698685259;
y1_step1.xoffset = 64.4799632124609;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
