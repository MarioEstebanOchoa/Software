function [y1] = flex_thumb_z(x1)
%FLEX_THUMB_Z neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 20:54:53.
% 
% [y1] = flex_thumb_z(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [52.4964427338317;33.7437982467825];
x1_step1.gain = [0.116423921759623;0.149465087282209];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.083930315281800560445;0.053683905599669776154;-0.083930315285362849798;-0.024566266418426820767;1.0611142561352264746;-0.083930315285079354348;-0.227122227483083583;0.083930315285682607906;-0.083930315285781056933;-0.083930315286427248367];
IW1_1 = [-0.12072022290478770512 0.032276022675512092142;-1.0092117711221637588 0.080693432152980054672;0.12072022291103085001 -0.032276022676504721731;0.74670206873026756522 -1.6763235657340584961;-0.82642840767174408079 -1.4670153568226171892;0.1207202229105527741 -0.032276022676427165714;-0.74186358180031930498 0.30598960711004391522;-0.12072022291161405017 0.032276022676595704508;0.1207202229117589759 -0.032276022676619255114;0.12072022291292150431 -0.032276022676803323153];

% Layer 2
b2 = 0.6273750139996783215;
LW2_1 = [0.1570526114071528756 1.0012015477078899384 -0.15705261141535578617 0.73514628096246192879 -1.1963746212368129296 -0.1570526114147008101 0.83620977138305851994 0.15705261141610679654 -0.15705261141630541544 -0.15705261141781454159];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0460379609362146;
y1_step1.xoffset = -42.5455437206748;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
