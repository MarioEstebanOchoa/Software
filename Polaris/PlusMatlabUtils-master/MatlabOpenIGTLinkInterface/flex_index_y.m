function [y1] = flex_index_y(x1)
%FLEX_INDEX_Y neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 11:11:57.
% 
% [y1] = flex_index_y(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 50.4446115060186;
x1_step1.gain = 0.111926515648932;
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.7172721863891799998;3.6004641994351826995;-3.0035886515720844336;-2.1642892573854841665;-0.42522367238646524568;-1.3602553213809447374;-1.8762763512227631502;-2.4960356716840506053;4.0782137141682897052;4.6162266568421603807];
IW1_1 = [6.0765724073460214427;-5.3819607485180815942;5.7772186198784512001;5.4634383165811302163;3.7886899622476279959;4.5399857886476260305;-3.0755451916944154256;-6.2465074549504056023;6.0474179875709692666;4.1999593816869156271];

% Layer 2
b2 = 0.64333807827409783542;
LW2_1 = [-1.4487979658208978151 -2.2563585361074345315 -2.1471326841567908161 1.8345946045084668974 -0.16170986813848159391 -0.85322367822426903317 -2.6820655392097680902 0.89365465113719189105 -1.3173046089347872911 -1.1690906210150049382];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.163050844805907;
y1_step1.xoffset = 84.1637955611414;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
