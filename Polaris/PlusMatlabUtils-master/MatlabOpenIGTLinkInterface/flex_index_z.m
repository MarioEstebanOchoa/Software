function [y1] = flex_index_z(x1)
%FLEX_INDEX_Z neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 11:12:00.
% 
% [y1] = flex_index_z(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 50.4446115060186;
x1_step1.gain = 0.111926515648932;
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.5662990750771399462;3.1317381898016605213;1.3999732169415488592;-0.048168750249047806444;0.0030033402615733699112;-0.26108789851607383525;-3.2181928834630793013;-3.6442494106876903714;-3.3146173065852093664;4.0347020826033590524];
IW1_1 = [3.273437243809432573;-3.3465382304245236966;-4.0976180318631865163;-4.2729056456643945694;7.7596899446630107633;-4.7468476378119603964;-7.7650821109200931502;-7.2201265235968294931;-5.1848287266935244588;3.0418704306541495264];

% Layer 2
b2 = -0.29864242508933214193;
LW2_1 = [-0.1467148821720219154 -0.30990332318241803344 -0.41871915662927838842 1.03673675794785769 2.1773996306082907815 1.9709131984928769388 -2.6040278574124675615 3.3631171060109150694 -1.8873890792044192288 0.35496934482104808284];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0630007733377898;
y1_step1.xoffset = 21.6775096098696;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
