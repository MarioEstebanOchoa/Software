function [y1] = flex_middle(x1)
%FLEX_MIDDLE neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jul-2019 16:45:10.
% 
% [y1] = flex_middle(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 63.7686290805757;
x1_step1.gain = 0.180004641181732;
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.4252362458400558154;2.9671697469222433341;-1.8948872772630409589;-1.2375698540063850839;-0.55196642266869111459;-0.9568154526229051271;0.2316765164467350091;1.9796954973334031092;2.5023404080628339763;3.5954082022302249477];
IW1_1 = [2.7927534931289597075;-3.5641289469725769834;3.3835290814698582018;3.5440440359524716385;4.8107174540316437472;-3.3071188479919126912;4.6116670136020392334;3.8051643702393938007;3.5511119480080677313;2.8462764294435296542];

% Layer 2
b2 = [-0.024138892554416615382;-0.073664709916501841525;-0.22271709886136842327];
LW2_1 = [0.32260558245782300357 0.34486890484882209984 -0.12660309486690815572 -0.21232320247860128615 0.5065241483288854818 -0.16231935835516111966 -0.38778153125426539916 -0.097202213324123640237 -0.32164907617231758286 0.44536813797920449254;-0.5903075630252972994 0.36185787051753243171 0.6266215831311710005 -0.13594556732390861153 -0.35728168587111525101 0.47972791019467542206 0.4484156518623554355 0.1368875229437953589 0.44603369534959286247 -0.77777523260917891257;0.18322421036216021695 -0.6331792535722032822 -0.45627848147975508253 1.0501703294794135779 -1.5367367878521847047 0.96807093566870761059 1.3910555503565928959 0.82646859425008056821 -0.23396846193685166826 0.86244824717333601338];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.21791678561312;0.177910404482736;0.0655369677280064];
y1_step1.xoffset = [6.4874392649439;81.1218585119757;31.820561970737];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
