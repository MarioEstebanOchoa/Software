function [y1] = flex_middle(x1)
%FLEX_MIDDLE neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2019 20:35:07.
% 
% [y1] = flex_middle(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 61.5186524756864;
x1_step1.gain = 0.190907655755773;
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0478367226918965383;1.0941152720934630427];
IW1_1 = [-1.1682556187181440954;3.0894011703300003902];

% Layer 2
b2 = [0.092115575866146798267;0.14912756448823896727;0.058291262227114490346];
LW2_1 = [0.31232154489535624009 -0.26057477244224258595;0.56062576763503402244 -0.029572559451490641746;-0.30899161328344937338 0.59778491164832059379];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.141012435688913;0.094505361403206;0.0532231090441924];
y1_step1.xoffset = [3.25268069154369;71.9415123157788;6.92316888754443];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
