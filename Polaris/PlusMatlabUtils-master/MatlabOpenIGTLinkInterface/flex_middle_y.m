function [y1] = flex_middle_y(x1)
%FLEX_MIDDLE_Y neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jul-2019 16:45:04.
% 
% [y1] = flex_middle_y(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 63.7686290805757;
x1_step1.gain = 0.180004641181732;
x1_step1.ymin = -1;

% Layer 1
b1 = [5.4471676593829538859;4.0806655635470541199;3.1430092866183643174;-1.5007736425421169812;-0.051239764029498556519;-0.64119096931241026383;-2.0073637253227007982;2.9578899473183799529;4.2060104374709768038;4.8784091878264304043];
IW1_1 = [-5.1948889678468486153;-5.6442862087708984831;-5.1940255650045008551;5.3303571346091951355;-5.4508735237353933556;-5.4345235091271186789;-5.2636129842215941821;5.3637474555569681911;5.8485201721115762652;5.6992300613568129819];

% Layer 2
b2 = -0.31120670941525335751;
LW2_1 = [0.30517702836995730387 0.36483208670625177916 -0.51770481721395200658 -0.19314514886287209583 -0.39258036403440138562 0.39726289577770695916 -0.23384070043641846937 -0.53781344948859000077 0.89957372810513558381 -0.4102635895209448269];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.177910404482736;
y1_step1.xoffset = 81.1218585119757;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
