function [y1] = flex_index(x1)
%FLEX_INDEX neural network simulation function.
%
% Auto-generated by MATLAB, 29-Jul-2019 11:12:09.
% 
% [y1] = flex_index(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 50.4446115060186;
x1_step1.gain = 0.111926515648932;
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.76244321074056808918;-1.1737807208596879871;0.23895340792843097755;0.39091730981916522625;0.2221831904903046051;-1.1737369433524276197;3.153056065685430287;2.3445182653637548498;3.1298205211105019075;-1.6373685082480156083];
IW1_1 = [0.90404570341114853793;1.2770508779794977894;-1.7374029020781878163;-4.5634674421073846418;4.4516840811578921588;-3.6890727633632538485;7.9519571673845090842;4.9070025002057606756;4.4577254073234113818;-1.7317555823122354752];

% Layer 2
b2 = [1.0656536077158604847;-0.71736958967975616996;0.067566131062709589017];
LW2_1 = [0.13723823991758724028 0.36665754790163351817 0.13198056858839110617 0.08393206388265775364 0.80036703823718746698 1.0809479824250829427 1.709475305860454819 -1.900942319624765009 1.9549810406811540808 1.9988036825810959751;-0.69256477042405317768 -1.0943384774780704483 -0.61774965804625892041 -0.49881214853750577287 -0.75314838560753749608 -0.56849871339366675471 -0.40055273261941559682 0.17496676303418445819 -0.24713379217806277777 -0.010428903465391842903;0.11706333883854633249 0.15730702662772061418 -0.77564422936399657349 1.1161610974798055196 1.7448360933766142722 2.265770895461067358 2.3541868603696198825 -2.3520780572479802473 1.7212267591497234509 0.016208184154101152458];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.273671106995872;0.163050844805907;0.0630007733377898];
y1_step1.xoffset = [25.3760075692885;84.1637955611414;21.6775096098696];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
