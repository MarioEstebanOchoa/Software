function [y1] = flex_index(x1)
%FLEX_INDEX neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2019 12:02:55.
% 
% [y1] = flex_index(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.2976233418694;
x1_step1.gain = 0.123506750467203;
x1_step1.ymin = -1;

% Layer 1
b1 = [1.7610055518531999574;-1.4604958482893313221];
IW1_1 = [-2.7977207650868742839;-2.796312345294617252];

% Layer 2
b2 = [0.0091175114147303629175;-0.16541870218035012452;0.04814718208900851254];
LW2_1 = [0.14398049404955817754 0.18354045170232291539;0.66564454577317599959 0.27200263965574894565;-0.27411783980257214965 -0.71898898546249556674];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0908081010462988;0.0711365377582372;0.0536302435409765];
y1_step1.xoffset = [11.8894782703153;73.5704473889436;2.93853321143709];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
