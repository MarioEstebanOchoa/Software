function [y1] = flex_middle_z(x1)
%FLEX_MIDDLE_Z neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jul-2019 16:45:06.
% 
% [y1] = flex_middle_z(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 63.7686290805757;
x1_step1.gain = 0.180004641181732;
x1_step1.ymin = -1;

% Layer 1
b1 = [4.8339107425194125511;-4.0387225222924589829;3.4798564006520518177;-2.5345979868223471598;1.4576825652719975768;-0.24702926020757121073;-0.63824285581335227224;-4.0312965527475164151;4.6546814117774610864;-5.7515235642951578754];
IW1_1 = [-5.8066641590359822089;5.785387343148382655;-6.2174032207187952537;5.981984096421332886;-5.4589100592173505078;5.5695390364537828987;-5.7564418920386000167;-5.2716465170661122031;5.2201405019050897138;-5.3736292777882894711];

% Layer 2
b2 = -0.55711050934028971682;
LW2_1 = [-0.73549653439392292942 -0.96155165108613860347 -1.528551873562457919 -1.4010107317512217051 -1.0118549740485986987 -0.87776061578965991483 -0.58686602542847376984 -0.61034961182387448275 -0.97369287092994583066 -1.4126173667346169083];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0655369677280064;
y1_step1.xoffset = 31.820561970737;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
