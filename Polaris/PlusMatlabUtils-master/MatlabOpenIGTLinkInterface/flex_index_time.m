function [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2)
%FLEX_INDEX_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 25-Jul-2019 12:02:59.
% 
% [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.2976233418694;
x1_step1.gain = 0.123506750467203;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [11.8894782703153;73.5704473889436;2.93853321143709];
x2_step1.gain = [0.0908081010462988;0.0711365377582372;0.0536302435409765];
x2_step1.ymin = -1;

% Layer 1
b1 = [1.7304209806651700276;1.3623507144301023608;0.94186848807965717345;-0.54225088806562971033;-0.060303335915271413792;0.80801341822567751549;-0.11148519105015121389;1.123812794230289569;-0.79503578110774564269;1.9293939102862223134];
IW1_1 = [-0.67504989974648554885 2.1909061843473032205;-1.093960969735599642 -1.9637003510063097966;-1.5155461887714716251 2.6238721203205015442;0.21322277085538060559 -0.2066177823849426054;0.32440064801745033263 -0.62340408656507173557;-3.0089261743729358578 2.5936207620994675693;3.0360461420718261039 -3.0165866164200254573;1.7298476702865508425 -1.4784404644678783569;-1.0198798251016940597 0.64782990997475831119;0.57959878261587183257 -0.58149153642792017482];
IW1_2 = [-0.98950274068033416963 -0.35070392395053828771 0.36321472567652246521 -2.3394517563085104328 1.3315657236942131103 0.48707017541280966944;-1.1190904719751766372 -4.0326526060441425514 -0.83148206042619732248 0.37745958816610852837 -0.66359376918048806893 0.41563215656362356709;0.8554376609968865619 0.5404855370451130403 -0.20868805609880924923 -0.9057957568324670472 -0.6170260482110463407 -0.039556684703138722536;-0.68000938328353199847 -0.12254174546259351264 0.012423815668561320399 0.35611162648080479931 -0.035694109135510826425 -0.019816497692173994094;0.85332438836846058461 -1.4628004010954682723 0.14867323177557403846 0.032605136457438857467 0.47684604643078687403 -0.19784027385535996046;-0.097288366023197916932 0.04115443033007182283 -0.39558431721392195435 0.18666580263512666527 0.21554829317211107731 -0.059498215272194593384;-0.20385384584364829585 1.6763880130566639615 4.1919363986886644113 -0.04615871135459825858 -1.4432075856014521253 -3.3152085303707194974;0.24004266645912536449 1.2690151301656398264 -0.54611434298396621667 -0.28569406184910889346 -1.323418058457708435 -0.08064108732579031158;-0.44470860034950981943 -1.167204817498531888 0.093871322274392182683 0.49221931248119193958 0.79436905694694837088 -0.27693764321862240907;2.0166906163948734587 -0.58653684724042243204 0.76336974713506011714 0.31182012855612623037 -0.098855528761663633008 -0.1084532843469957486];

% Layer 2
b2 = [-1.3538776139209836025;0.086202953213821847944;-0.39736519833643013655];
LW2_1 = [-0.074550794963119698666 0.0042916490383479825865 0.10995014260414603946 -2.3675216036038930767 0.29628836061125463086 -0.096921659195184597935 -0.026545641039870677969 -0.0257065650008713939 -0.16839544739633438564 0.17701935509665830959;-0.043767243471503479435 -0.14890686973372727064 -0.25050920807823029435 -1.0149591642700224181 -0.43567552979374929434 0.41855456989999190176 -0.028496102326987061276 0.025692512896353769669 0.46072262213919684681 -0.22480933264049235421;0.038711464504959047783 0.084187854141824711163 -0.20411576304544765126 1.5477899419414116178 0.64042803838631146007 0.47996101556229675555 0.4993434342737561038 -1.3755133577285318935 -3.1401000639127167879 0.12137797955965975993];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0908081010462988;0.0711365377582372;0.0536302435409765];
y1_step1.xoffset = [11.8894782703153;73.5704473889436;2.93853321143709];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
