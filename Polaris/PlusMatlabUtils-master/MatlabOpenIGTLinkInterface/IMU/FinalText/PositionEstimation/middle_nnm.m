function [y1,xf1,xf2] = middle_nnm(x1,x2,xi1,xi2)
%MIDDLE_NNM neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2019 00:37:57.
% 
% [y1,xf1,xf2] = middle_nnm(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.095;0.0895;-0.1056;0.0942];
x1_step1.gain = [12.0264582080577;7.93335977786593;15.1171579743008;9.17852225791647];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.185156858448871;0.0691417526843606;0.0766191573484354];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.014675058864138473824;-0.085666949321671501116;-0.019221551540636157285];
IW1_1 = [0.13409608673978193338 0.044936881884866469727 -0.037758137977124427154 -0.11009321102180968932 -0.12214247291368110493 -0.054103508663968229164 0.017474120549215096249 0.11442118474042604903;-0.078568764812489796934 -0.0281683316087178795 -0.061845389113259201241 0.00085941643216456021365 0.055942010668456748634 0.0039775535440137446339 0.040652627895534296232 0.016512900016545872806;0.039430578947941115342 -0.25330429649593277919 -0.19259848901218615258 0.045266276649031898793 -0.021256965033967761824 0.18639104745661139173 0.16549930350110514388 -0.012629719035816420331];
IW1_2 = [0.11746269814739108972 -0.49661197955208102872 -0.77290446963007763959 0.0062281087229833073313 0.0021779396191811553965 -0.0071630738754474366017;0.75300193280631166903 0.53623692009227630351 1.0474746469700617624 0.018563039011159028491 -0.047419166528554657081 0.023267651501745763298;0.13729226577878447801 -0.43306158126603755409 0.049950330644229962163 0.0031072348077366266673 0.013363053890688670125 0.027868516738742819816];

% Layer 2
b2 = [0.053147917299302023519;0.051177089602901945642;0.019366141204207938664];
LW2_1 = [1.5420789258601099725 1.1925467107303642234 -0.50831592843305672957;0.37925471848584157986 0.33816901489604178632 -2.0701369137954124255;-1.2509783496179189832 -0.072626576675534043614 1.3269207284428403693];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.185156858448871;0.0691417526843606;0.0766191573484354];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
