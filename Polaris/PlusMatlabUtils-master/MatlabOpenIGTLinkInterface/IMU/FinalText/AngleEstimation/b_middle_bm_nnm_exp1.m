function [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:48:14.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.408452786999554;-0.263333821349932;-0.139058055166765];
x1_step1.gain = [2.37715946826089;4.07217099049612;6.85986423641121];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.14599118962916984854;0.025025775325998898119;-0.094477053744967454119;-0.059957383011683088037;0.061711243349592909135];
IW1_1 = [-0.56150641138456236501 0.84832361717631232789 0.17835438996467212203 -0.1950883801027466502 -0.17259219259105057498 -0.10466673779549724721;0.22154662116436069086 -0.28834870389863959117 0.1809473906623887407 -0.75023729875534195255 -0.25068129672620043102 -0.21129237364304728763;-0.098522161492162557694 0.18526632381613605816 0.18978345569914270574 -0.69175970614249981949 -0.16613980606886721847 -0.19323713227734509723;0.1933661185771497204 -0.44660587855116684608 -0.067662233451816086727 -0.27801801005991633176 0.028094725804642995542 0.030382405501215008214;0.59132511233652207405 -0.93325568594579533244 0.02891616272109619537 -0.27710229046926165841 -0.10681982316141303002 -0.11425071596950492347];
IW1_2 = [1.7998540881258200397 0.82159465336098169708 0.051424498008067337507 -1.3786323443707240166 0.2175471067943706982 -0.23865557206821830238;0.62092653571577449689 -0.30840872337571217932 -0.26613390569839068256 -0.65220154428907761712 -0.080145231311104042637 -0.068879862934481159153;2.7990032690187769404 -0.56380158137167579735 0.67878612178992348003 -1.8368001801734312739 0.5165189282895381595 -0.52733620541847814334;-0.10025853229273511136 0.24005528967764697135 0.17680248402984113931 0.035677981008589695899 -0.271605608879103122 -0.031408424873049956005;-0.46595022516555689718 -0.76886142017002778726 -0.89415816790246871459 0.5123389064834406037 -0.44719321873880513163 0.43514931718961147311];

% Layer 2
b2 = [0.16136302027636828527;0.24304437376866119824;0.010849259020540935258];
LW2_1 = [0.7671557763478603631 -1.4029928307302623747 0.76405878138999505644 0.43428024898356343275 1.0840042091975694571;1.2332292009504552954 -0.98126472386662433323 -0.4018231638885382262 1.9943108271248273233 0.65767560973282246373;-1.041780353728680053 -0.13034242009377358662 0.60412891390377632117 0.79917672576968556974 -1.1036497066709545223];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
