function [y1,xf1,xf2] = thumb_nnm(x1,x2,xi1,xi2)
%THUMB_NNM neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2019 15:28:41.
% 
% [y1,xf1,xf2] = thumb_nnm(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 8xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 8x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 8x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.7201;0.0064;0.5702;0.2422;0.0864;0.1523;0.9267;0.0585];
x1_step1.gain = [5.35762121618002;6.53167864141084;8.06776926179911;6.4246707356248;11.4025085518814;17.4216027874564;43.1965442764579;23.5017626321974];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [19.91904251;2.583829047;15.72255665];
x2_step1.gain = [0.0470926729892737;0.0376234231319031;0.06953254154686];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.19514323983255282835;0.04097010430568281264;0.2654528321924837786];
IW1_1 = [0.018063621068328886143 -0.21526818321332036321 -0.23242771844115411861 0.20462206415067729637 -0.20951728723744544869 -0.45935380170738138172 -0.19623169917346236502 -0.20456612934863427355 -0.2440549522187852316 -0.033129279225902988348 -0.13957280238153632612 -0.2038798533363909149 0.3095085392816830927 0.30885932824011930187 -0.092146984148592139818 -0.079186320865182721618;-0.12844444502893959115 0.093533831852793181127 0.14232227029161326204 -0.030629781034370012066 -0.0084898172338886013916 0.034456525403650517525 -0.21317134364433670823 -0.041066640619124676614 0.174797009188585456 -0.095914751327956473959 -0.19806667992481813423 -0.054045767185792660536 0.011366033130511613014 0.022843906601243944149 0.24917373357638683551 0.059047494868557058589;-0.10699511915738996182 0.040191645949195033138 0.13892429962435626223 0.1150184702724089264 -0.25233681982194072768 -0.077730176852830276668 -0.12828323052448745156 -0.017942438547806870835 0.19345074373252091338 -0.041532713624760707327 -0.19756608550031118376 -0.19328634633408522947 0.25962541412045153644 0.10671367271430864943 0.15324953538012300869 0.047558697807756962483];
IW1_2 = [-0.13891837429192274711 -0.76058004606203277742 -0.75392115846583751537 0.02631912147935389773 -0.036564917288596968103 0.070945695941017489217;0.68704312950657886461 0.61331304854179669039 -0.73870713815189059659 -0.29262548105706154278 -0.37333714887237601232 0.3992241221058001055;0.15711253689655502175 -0.53758674142570683774 0.1711411773581351381 -0.040408879372919141726 0.2108492695655552196 -0.11208351941268389351];

% Layer 2
b2 = [-0.63846644491995085957;0.54023547647959424545;-0.20171319254783831587];
LW2_1 = [-0.40787488731599380598 1.4132263269001785755 2.5222596616962440486;-0.31874364424587087186 0.42100511141191704345 -2.1610400352710295024;-0.70244350399400934393 -0.85751547559068030946 1.0744829208800392717];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0470926729892737;0.0376234231319031;0.06953254154686];
y1_step1.xoffset = [19.91904251;2.583829047;15.72255665];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(8,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),16,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
