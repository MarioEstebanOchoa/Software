function [y1,xf1,xf2] = index_bm_nnm_exp3(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP3 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 15:02:10.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp3(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 5xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 5x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 5x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.44187443254308;-0.290030409875721;-0.21809646746465;-0.200358474000746;-0.141009323793073];
x1_step1.gain = [2.50434222911229;3.42805241045766;5.25791464388627;6.06885454376742;7.36657891744156];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.036435346711799064534;0.14840628656086082837;-0.0076779541684504591659;-0.082833423331723152194;0.44491641256674141491];
IW1_1 = [0.26892280249128575065 -1.7228196968507114573 -1.0314628309391569161 -1.7950427978149752217 -0.35348252663211715552 -0.25664339515829598382 1.6786321578243788011 0.74691254311381682918 1.6965275377319610772 0.36346668211967780859;0.2218291643432572513 -1.5719833172561668011 -0.98084893952216334334 -1.6317907334842236544 -0.27670007040027810863 -0.2102081196760328119 1.5636384377067311657 0.75354032393334535733 1.5509803440090419446 0.29506396710386950666;0.040710147715372312083 -0.34193325142786007431 0.043294979897890981113 -0.31859126880795851644 0.10341248639496426753 -0.054588181248581078842 0.20588745362289928575 -0.014052111494255030075 0.24136503364928307835 -0.060123753517394351586;-0.40232408894541060729 0.90087696053852284184 -1.1286969358675160713 0.024024695596055301028 -0.92061809508852121553 0.48332471030738854978 -0.59391514078175100533 0.90746996042673444549 0.047511313642290449455 0.9047377218892763695;-0.15591946804989839648 0.6958808005937152652 -0.13204255017452051768 0.52256674288138760254 -0.15273678681591826289 0.080949089307508353963 -0.54330204565622497448 0.10856452870421974544 -0.46875252103160452988 0.12650267714091248394];
IW1_2 = [0.48576114987899959852 0.20084703416182619895 -0.66497397534318025691 -0.96890316395006048644 -0.079998020016505910768 0.59107435476702541166;1.4754966081328464433 -0.16631296518129995432 -0.29172408586282599918 -1.3512591438494314655 0.12794844004539335236 0.38494754626808280751;0.6204564568476516051 0.43583749672267363406 0.74328547022304503056 -0.20182701701809979689 -0.11410335413047292819 -0.34163565628378411709;2.4821302934050279987 1.3284373903658808214 -2.2571758228448772776 -1.9852442133412357972 -0.85947492084481391661 2.4338612623114768141;0.93266795134071822648 0.19224723989910796895 1.1005984999032993876 -0.41169008048377014886 -0.1213768952157723291 -0.25937687488890243115];

% Layer 2
b2 = [0.11176782885335080631;0.48049105387374602127;-0.56265554738689749215];
LW2_1 = [-1.4755800011218731527 1.546259417162408667 0.36725053477990093898 0.27397681675239560217 -0.61140493409391549751;0.83225840880055590443 -1.3697539837451586653 1.4037969407137147471 0.49045280333530127947 -0.68070325856911073625;0.66562823058556375155 -0.48553392286490887342 0.088007300696102644388 -0.44648165683980090002 1.3599758023137495933];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(5,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
