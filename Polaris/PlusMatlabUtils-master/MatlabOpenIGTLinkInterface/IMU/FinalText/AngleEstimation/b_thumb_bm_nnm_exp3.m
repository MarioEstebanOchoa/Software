function [y1,xf1,xf2] = thumb_bm_nnm_exp3(x1,x2,xi1,xi2)
%THUMB_BM_NNM_EXP3 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 15:02:39.
% 
% [y1,xf1,xf2] = thumb_bm_nnm_exp3(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.269014099974181;-0.223982023581237;-0.101254157047582;-0.0544218870553035];
x1_step1.gain = [3.99247808644197;5.65271152705721;8.84684566125312;15.7609848396603];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [19.91904251;11.4845143;15.72255665];
x2_step1.gain = [0.0545495745161281;0.0469805080836431;0.06953254154686];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.26728013373953202203;-0.048918775291237157066;0.13569154050580248261;0.08305408180698919951;0.18325423901873338917];
IW1_1 = [0.6877847834051624698 -0.030067712585966712563 -0.12058444118216321561 0.043929959531391900296 -0.39551493345331523166 0.19853752622361570124 0.25003118277874702979 -0.17841404731906948533;-0.31878507265171018847 -0.096940189334044121749 0.29153620634605137418 0.15701343379333379535 0.35519751018385681274 0.018751206909028102221 -0.26072965625167165982 -0.23729926140925228228;1.1416511380611351623 0.130601225830391382 -0.66085487718343738361 -0.29484340495009447869 -1.0838481667891712856 0.15890272867631338727 0.70708689715114614316 0.28322015256744353939;-0.031285530929784421961 0.095109343499221565832 -0.019972571085277269348 0.09852450975184449955 0.1698912686615305645 -0.054383710569630733245 0.032985167054053347868 0.02904147440874601041;0.14571693394688545187 0.10962027412062406995 -0.18683700148215873216 -0.086155618195668040582 -0.16357696417251385568 -0.029838510375940881236 0.15214969766579897192 0.15632162564399165738];
IW1_2 = [-0.37626620566050938965 -1.053265252192484569 1.6878805467748017044 0.49035518293398183687 1.5778442988549721271 -1.5751010760007297939;-0.1895506488544230761 -0.15568315452330033777 0.78429925485317897316 0.58701394798736861169 0.029806866330284276928 -0.75247947581349350354;-0.0016065323680154975586 -2.0987137201725225566 0.88630018725985482142 -0.34288301369180096412 1.7418622847781801699 -0.69445625233962260392;1.2914075451082611679 1.7439311567151567495 -1.3900799720556018535 -1.04393768587578184 -0.81373347292526998498 1.522163499894999994;0.13868363758032972721 -0.076387593884327004146 -0.20310811731659286772 -0.52251863847492452386 0.038126142793221011462 0.58633077903311026091];

% Layer 2
b2 = [0.20232990710362994125;-0.23630210122023875829;-0.44309997224273800498];
LW2_1 = [-0.93062143803016927901 1.799169414567715064 1.3670061919792146909 1.2804648686702913007 -0.93657977709408524181;0.9865791391172781255 -1.2366099243846755407 -0.94924160323860951038 0.19036587291316017789 0.086688894312212910753;0.43948223398582891841 1.6204907309505218738 -0.15587469407794843357 -0.0032040297771324427641 2.252272632822529097];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0545495745161281;0.0469805080836431;0.06953254154686];
y1_step1.xoffset = [19.91904251;11.4845143;15.72255665];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
