function [y1,xf1,xf2] = middle_bm_nnm_exp3(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP3 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 15:01:40.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp3(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 5xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 5x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 5x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.478430112409621;-0.351279271702234;-0.234764927001974;-0.148282331331232;-0.0835727366484346];
x1_step1.gain = [2.28075017756591;3.62779767099633;5.16678629396411;6.36699236891775;9.26862345268153];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];
x2_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.14517023755215546776;0.06169636749460678804;-0.046766827690827579567;-0.01385674023368026718;-0.16487719859155991475];
IW1_1 = [-0.18247187021428498688 0.44726475877983218332 -0.23200152641960344879 -0.28678864167666029417 0.35392666878795980834 0.08752064722401819985 -0.47444759824612225962 0.26288200091538321823 0.26961402929240041448 -0.38378727470705531477;0.32421845080026673314 -0.8635399095488345278 0.42083111631081759896 0.49013780970179310348 -0.65119444045363183982 -0.14440316555320659164 0.95041230620592931366 -0.49762275778337072829 -0.45980000064830778284 0.70835457724982398009;-0.55884599577047933128 1.1467236089194086102 -0.4184996035059290187 -0.72728634075876097409 0.8154067929277777349 0.21987768270834581741 -1.2327922796281787221 0.41664733165675227333 0.68622670619201864284 -0.89713240364378032954;0.43086078162047702911 0.47104485247494698452 -0.24019193016708423327 0.1009955888355709569 0.18333938956066622716 -0.45517967848726015312 -0.012196010085579491594 0.57865078699570449139 -0.10204939688572733925 -0.14172564806876994381;-0.2835682669139105716 0.73205398640178764857 -0.33542544553394620932 -0.39314776812646146098 0.48531477271944994945 0.064569105821319042193 -0.6981985008666908854 0.39857595173876614325 0.36702968856831502675 -0.52484042533406938258];
IW1_2 = [-0.081571686553566516431 -0.57393586760854564677 0.059853834550779957957 0.36940293526533168889 0.35386976358781718766 -0.25727919117787412251;0.56253365395511256697 0.65362211941411008098 -1.0132569975351846114 -0.77974589282135420287 -0.5985838756914602099 0.82411915195538865131;-1.5763797259885692359 -0.1661205250259444044 0.61886176842602669268 1.7370021490008846765 0.44821063124333621053 -0.68596615256249515724;-0.12485482118553360709 0.62405437243492845045 0.83847868338048903158 -0.85660632675062209351 -0.47580641986557314915 -0.43485031580404870377;-0.39000567170774269599 0.19175479884581961287 0.60896233436619406909 0.60458728010173212741 0.1866938408314961495 -0.47207299636032118428];

% Layer 2
b2 = [0.085545947956667631185;0.34353697869915655883;0.41267167784821162657];
LW2_1 = [1.2023128535663087924 0.084048528788876503137 -1.8224464142519956056 -0.49038823289471372702 2.22264519655033288;-0.72371129041347148636 1.205873833647369775 -0.030903988909603077179 -0.2161878360447102021 1.8074001785650779528;-2.1704278609070755124 -2.3604073646172634149 -0.89321594463219089466 -0.17390374108908518425 0.2093959752737686586];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
y1_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(5,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
