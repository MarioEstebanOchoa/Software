function [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2)
%IMU_MIDDLE_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 11:25:50.
% 
% [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-48.9705930911374;2.39673886202616;47.3520268272528];
x1_step1.gain = [0.0792513326762923;0.200883301471603;0.129108325682204];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.251745614276196;0.225897147188939;0.118186647103477];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.31096743914527191777;0.004166815298789193836;-0.080473376738085980464];
IW1_1 = [-0.04063059389245739228 0.054600640172847020315 -0.052801582176889801101 0.046280034657280838539 -0.023684872156829784445 0.050372671353279933892;0.02353729740090350353 0.10117770537965319055 0.073964757683339987793 -0.013593375711352171167 -0.076394535021657314355 -0.034544163904477592775;-0.020336172854133815341 -0.034922242979601128554 0.034111340083112784427 0.0020071344920663636117 0.035148044910497090731 -0.040442381751499001385];
IW1_2 = [-0.83113676371095501771 0.053275853768651987297 -0.3843953173943194801 0.28832945124505665602 -0.0032240605071199106811 0.10011684526613189028;0.53708325026083103548 -0.88839353718705449392 -0.61317855613526905945 -0.22496399104299044658 0.37381994611666402584 0.20293446397312356333;-0.21452420909081251765 -0.76125051781933272821 -0.23038968761182559986 0.06148266044348149606 0.31448537484031774403 0.064034074935976639797];

% Layer 2
b2 = [-0.37948485876988624632;0.11605279057028201894;-0.36217679266409086303];
LW2_1 = [-0.84652874930435895173 1.1363809927455472693 -1.4391412833174264119;0.94351529817808588163 0.42403156726843754809 -2.4535616633712926671;-1.7860830594838374985 -1.9760484909809603593 2.0032426288119968838];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.251745614276196;0.225897147188939;0.118186647103477];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
