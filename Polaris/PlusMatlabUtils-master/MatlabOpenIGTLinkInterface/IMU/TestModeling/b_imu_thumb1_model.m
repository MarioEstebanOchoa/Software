function [y1,xf1,xf2] = imu_thumb1_model(x1,x2,xi1,xi2)
%IMU_THUMB1_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 18:15:56.
% 
% [y1,xf1,xf2] = imu_thumb1_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-38.0348129818984;-37.2399403843159;-22.342930113257;-23.7008740126721;9.70392713347758;-23.2074986905313];
x1_step1.gain = [0.11214072723293;0.113049117402383;0.0845106717536439;0.109431150869427;0.12259959822615;0.0408288719550837];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.0447935251921758;0.140432692597265;0.106721449115078];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.10636834190544840195;0.077185084615373988903;-0.13145677617365880696];
IW1_1 = [0.11003160637679468281 0.37892188370266582931 0.1936677085926924724 0.13284442090262460479 0.1109225618919089662 -0.068333315066678251837 -0.14937704640571883297 -0.33359428424252446366 -0.14200828037661936132 -0.11394678147107449584 -0.10562384001027837199 0.053739285360844137041;0.069692112127024724577 0.24976318410932638048 0.22577678691962618784 -0.0042419681979947556141 0.01133949515317995288 0.035088636979307356867 -0.032620546330237434884 -0.28527369696156795742 -0.21673789369365364932 -0.0047779536329643958886 -0.00389817297875821216 -0.077411657182094750773;-0.07340688867083952629 0.048606932041492627306 -0.059503563070829330883 -0.022043887858487602044 0.0049963818877804492408 -0.012727801325634918728 0.067041730252695760917 -0.048919220014168159072 0.062041784825011478399 0.015470834021467530159 -0.012838112925317661517 0.017394459286003815385];
IW1_2 = [-1.2123049178204585719 -0.31922052098643421969 0.93500742861486596524 0.35325810310178118456 0.058585455609716514946 -0.39409735513426902287;-0.28639273433040862704 0.98191204001512877308 -0.30295954937691493836 0.15016811970577881308 -0.32751562143274687289 0.24603235388137412176;0.35538555678764599532 0.31970561998738117326 0.62672127538941180269 -0.030805655188254219001 -0.0049468530717171202774 -0.15760865474934673824];

% Layer 2
b2 = [0.096207984889844860854;-0.012137647895721507055;0.2235407975914819878];
LW2_1 = [-0.72665797180084756857 -0.74341629798118391559 0.75315865055854991361;-0.0066763101642020525328 1.3380202216908037016 0.28244668235021158642;0.53657704643060688543 -0.42503255751979601706 1.3985163433372109765];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0447935251921758;0.140432692597265;0.106721449115078];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
