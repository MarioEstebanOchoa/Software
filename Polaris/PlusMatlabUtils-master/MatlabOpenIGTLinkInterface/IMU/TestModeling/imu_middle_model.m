function [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2)
%IMU_MIDDLE_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 17:53:25.
% 
% [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-48.9705930911374;2.39673886202616;47.3520268272528];
x1_step1.gain = [0.0792513326762923;0.200883301471603;0.129108325682204];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.251745614276196;0.225897147188939;0.118186647103477];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.052340509024377250558;0.019373407122423899618;0.33587904383120503748];
IW1_1 = [-0.021623170665880774716 -0.019197153040910353017 0.024822805627291642111 0.0023335339534498239153 0.022487324058009156014 -0.026164991565552145336;-0.041029261482739706746 -0.1068908715459295361 -0.067280108933142013239 0.026501474612166679018 0.080603517288736811763 0.023227901873353013623;0.039026415838008303438 -0.058690803290846887963 0.045950924380936092328 -0.039496227545783531288 0.030125701846327210959 -0.046312107063163028553];
IW1_2 = [-0.19531098157284160211 -0.92138341971170334421 -0.33019924430130342952 0.036933896163537149882 0.40276955890013776962 0.097484854003864238048;-0.53668083018394441286 0.80230852778170236306 0.52466943483429351325 0.21794463170559097431 -0.32873105999547291844 -0.1710678046821381415;0.70810219295819565311 0.027055171191117867446 0.44367695998736683682 -0.23410143717553305587 -0.030439330503315854826 -0.11862189764968318617];

% Layer 2
b2 = [-0.28325797113005574124;0.29466606826654723195;-0.6157592979330417382];
LW2_1 = [-1.3745104039607172197 -1.4766759186950535465 0.72584409349199952022;-2.2595305473692661735 -0.54715102620136157885 -1.1439708009806623945;1.8028024792365411333 2.0456727223731845378 2.1121442204344060833];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.251745614276196;0.225897147188939;0.118186647103477];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
