function [y1,xf1,xf2] = imu_thumb_model(x1,x2,xi1,xi2)
%IMU_THUMB_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 14:15:18.
% 
% [y1,xf1,xf2] = imu_thumb_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-39.5814202801957;-33.4308049557301;19.0002317167649;-44.1577593052167;-17.2162419428127;-14.6323239927647];
x1_step1.gain = [0.272119631152624;0.127788634674506;0.153480033001078;0.0612382787802275;0.212617392349855;0.134009155806164];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.0791754664967608;0.169360254337403;0.161009431206112];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.087515927956746078498;-0.056047919919098444785;-0.19722109033465473615];
IW1_1 = [-0.07924861040086786379 -0.044090973103031151636 -0.049284925022621578483 -0.12425094588519149108 0.025572205180385831902 -0.15100877752673910748 0.086809222160515994715 0.049141563488604919629 0.038868846605003802563 0.088186711965284297898 -0.0054265339980079816892 0.11026158682226204488;0.082157738191103321657 0.24473683263284060074 0.062046187981845676851 -0.12705904326828698636 -0.093946550706955261889 -0.04857338106271492234 -0.099149507162216557465 -0.25121038311275301069 -0.065027951320367427535 0.14548988037731347411 0.065959545013047252149 0.05936324747976664401;-0.02064050315593800658 0.12672756621705202895 0.16498009571320942923 -0.015484073295788009644 0.034162737422747432858 -0.0004252326617523032341 0.020859610273596042307 -0.11544777123894883752 -0.14747485969437937325 0.042117717293854745053 -0.037051901288754567065 0.0050029669021670192253];
IW1_2 = [0.30210133006077732887 -0.7322936702448948898 0.77691827835249804846 -0.073536760898361169803 0.19312514733910093878 -0.15619209507448877927;0.03685431314601994579 0.48815386394408089021 0.60996223438269725481 0.13577637449332941033 -0.044563196354777727393 -0.16542410392423639864;-1.028662975917878919 -0.31180249307420376814 0.0954769568094181037 0.32252561049058675602 0.059507356065599106842 -0.010868603462981780636];

% Layer 2
b2 = [-0.18953222122418314499;0.023238473279004048105;0.20693558865889979947];
LW2_1 = [0.4843559479187350969 -0.31684291437148781601 -1.298713346903414223;-0.8684340547774664909 1.167387194760160618 0.065644375760828418964;0.65625776119157996913 1.1836030226507705532 0.48701666334105181422];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0791754664967608;0.169360254337403;0.161009431206112];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
