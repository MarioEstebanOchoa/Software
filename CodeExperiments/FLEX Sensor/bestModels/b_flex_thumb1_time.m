function [y1,xf1,xf2] = flex_thumb1_time(x1,x2,xi1,xi2)
%FLEX_THUMB1_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 06-Aug-2019 18:26:20.
% 
% [y1,xf1,xf2] = flex_thumb1_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 2x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 2x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [58.4332028867381;24.365448261229];
x1_step1.gain = [0.210776715187679;0.125884623516609];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.0418984193028848;0.221807836998595;0.100671820939581];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.98916493399292237942;0.079255286281997530673;0.24388828338854284805];
IW1_1 = [0.093131240037890694605 -0.87961638119511520451 -0.086034666101488563306 0.37716041093228452885;-0.070111589796412368547 -0.43223761606307004035 -0.070084753526808207802 0.3151975606395888696;-0.66868945512651745133 -0.11727658820137126794 0.44529740684542018503 0.09176706062391887242];
IW1_2 = [-1.1015516066266330952 -0.19770599428488308535 0.34314129163916889942 0.25712766570581779835 0.013658568748992946928 -0.25468322161050555019;-0.86732281787615572721 -0.16657593568885370461 -0.13996935287604700404 0.071560720902571761659 -0.052185733157213406996 -0.156651299590087556;0.0040247630077726520917 0.74584796394962049604 0.31359254999408409104 0.38671305947857675944 -0.0099768565969237058694 0.20778977773421669628];

% Layer 2
b2 = [-0.1644854698047913677;-0.49526175153832469045;0.79818038967579718612];
LW2_1 = [-0.54095305341075328176 -0.82382838981823569569 -0.17616218738322023118;-0.60310401012798986464 0.52948860927795571296 1.0596375392431900408;1.7352664459034656819 -0.96425060886208413535 0.30128921058515317766];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0418984193028848;0.221807836998595;0.100671820939581];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
