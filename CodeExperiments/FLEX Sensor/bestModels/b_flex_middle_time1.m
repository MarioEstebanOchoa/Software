function [y1,xf1,xf2] = flex_middle_time(x1,x2,xi1,xi2)
%FLEX_MIDDLE_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 08-Aug-2019 12:45:13.
% 
% [y1,xf1,xf2] = flex_middle_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 59.8362059788327;
x1_step1.gain = 0.155349197573605;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.215308210362026;0.200743637827004;0.0897665629343387];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.28653464292005931258;-0.23973025486694060637];
IW1_1 = [-0.12986797980101072447 0.088072339122319182048;-0.094528465154738547382 0.024082672704818734039];
IW1_2 = [-0.058198095617062538254 0.67330756001749092476 -0.58948160339554978027 0.098259112861341507683 -0.37410130146420550457 0.24002259087656740988;0.26697289474255025965 -1.6214029638903428854 0.070026116353340092657 -0.26786322822450164827 0.95763533794509259067 -0.017051150184564722173];

% Layer 2
b2 = [-0.21137417369339214779;-0.28710711921308518235;0.39376358212482981402];
LW2_1 = [1.2975155763429935263 0.72338642100517613898;0.051101997408705038262 -1.0040053839840521466;-2.2875069371312766187 -1.0371493261009276932];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.215308210362026;0.200743637827004;0.0897665629343387];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
