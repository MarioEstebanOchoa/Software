function [y1] = flex_middle_y(x1)
%FLEX_MIDDLE_Y neural network simulation function.
%
% Auto-generated by MATLAB, 08-Aug-2019 10:16:38.
% 
% [y1] = flex_middle_y(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 59.8362059788327;
x1_step1.gain = 0.155349197573605;
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.154585593720332426;1.806802212150119491;-1.2135813662514638445;3.075789618895141686;0.77791341519480583511;0.94126622890991828996;0.19357662504733344488;1.7402185844969171313;-4.5520231595703570804;-3.9469558149704973005];
IW1_1 = [4.0471104617860778063;-2.2087466538062434651;3.1917399078166579507;-7.4892274034331167698;-5.9724948077164077276;-2.6657284914898946582;2.0030791691785969633;2.5016259006619261385;-5.9197995838913115563;-4.4414557926583997371];

% Layer 2
b2 = 0.23647857927711016246;
LW2_1 = [-2.0243854573750330594 0.14742407868754348055 3.1640488991522559559 2.2146925859098152145 1.9197808812409813406 -2.6512187688077784031 0.27050743222262868537 -1.1096787108175452108 -2.3711602840128227498 2.4372547954836529804];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.200743637827004;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
