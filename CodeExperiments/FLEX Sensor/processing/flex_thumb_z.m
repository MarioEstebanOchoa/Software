function [y1] = flex_thumb_z(x1)
%FLEX_THUMB_Z neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 17:36:45.
% 
% [y1] = flex_thumb_z(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [55.0872957664198;27.1156434515906];
x1_step1.gain = [0.137170066897646;0.347969480641399];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.044854828624066880871;-0.043456682728069781496;1.0714583880248298442;-0.1126212391687667902;-0.044818357996558221001;-0.04379693082760567624;0.042538155760374035674;-0.044627592389363222869;0.044988863903659040422;0.045048679050632527143];
IW1_1 = [-0.015006186467765917497 -0.11732647911939965424;0.014590040445471033626 0.1134983238584350157;-0.87507748157448272952 -0.13738557153476507744;0.60987105938741548172 -0.78681762288815515483;0.014995420779134084263 0.11722637022758183867;0.014691944790796586384 0.11442813456830769336;-0.014313019835054797621 -0.11099380671140078591;0.014939028694064807393 0.11670295742324854338;-0.015045709296778460307 -0.11769451328382408983;-0.015063325095375066157 -0.117858813961998668];

% Layer 2
b2 = -0.38064321249171023664;
LW2_1 = [-0.13001975910474397602 0.12557469909870308533 0.60658911546105309665 -0.83561872801756253981 0.12990322732982917397 0.12665227649109744856 -0.12267859366214238503 0.12929420601653235368 -0.13044830584637018278 -0.13063969050284193751];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.239879029576595;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
