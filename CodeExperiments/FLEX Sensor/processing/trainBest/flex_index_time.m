function [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2)
%FLEX_INDEX_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 06-Aug-2019 17:56:20.
% 
% [y1,xf1,xf2] = flex_index_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 51.7576747505134;
x1_step1.gain = 0.105728516413507;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.327151938288209;0.124714715389344;0.141326247237917];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.78746903823739677897;0.38872395393579228795;-0.076555429404975547381;-0.4268444781813707789];
IW1_1 = [1.2672096892163182691 -0.18865756334734609667;-0.15543291814382273475 -0.41493735128905906429;0.15036326519085285724 0.14542276617873006739;-0.72265809140157422075 -0.057268266344271817614];
IW1_2 = [0.0044531336637725939254 0.20027852371871598947 0.68647456693761776947 0.42618453220941260318 0.17612056899185615788 -0.037909174612758382572;0.74440023855878567627 0.24336737913097322705 0.86712747713085625012 -0.89112033336175378029 -0.59737181014647544597 -0.28934303907910624565;0.92505513630140423498 -0.19190952612835562863 0.32817810226031657317 0.11165040974768054849 0.12934872719332532465 -0.10223495494126645655;0.15568250811837833214 0.37676958921824821314 0.058923149939325007718 -0.50675318589960260951 -0.22799409938973375089 -0.034562761996501267792];

% Layer 2
b2 = [0.30594231185180392751;0.59533538085188453248;-0.69455727688883206472];
LW2_1 = [-0.29580652988231770362 0.10963359547852269404 1.129099157833270306 0.52907222692421274068;0.63913819684843387048 -1.0567779948709641324 0.18408644609210542131 1.7245971927443675131;0.64474111442308823516 0.78180304838024017311 -0.24582877197418642745 -0.51933196139067994146];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.327151938288209;0.124714715389344;0.141326247237917];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
