function [y1,xf1,xf2] = flex_middle_time(x1,x2,xi1,xi2)
%FLEX_MIDDLE_TIME neural network simulation function.
%
% Auto-generated by MATLAB, 08-Aug-2019 12:47:55.
% 
% [y1,xf1,xf2] = flex_middle_time(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 3x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 3x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 60.9912609774754;
x1_step1.gain = 0.198298497732282;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.326550050494534;0.272949142063996;0.11331369627814];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.034257407987083217382;-0.2120496548318807073];
IW1_1 = [-0.1987613641505339146 0.13948125184455423264;-0.55122515067787714038 0.22089723908570241262];
IW1_2 = [0.9549481506834240907 -0.14030620990093428668 -0.15116653233699267611 -0.17093131460420626921 0.097509479630908002523 0.01651354818552307549;-0.12988177074674625566 0.14898246816422291983 -0.15091102052512420095 -0.0046548530568397781387 -0.023147464081547261538 -0.047505035363171091434];

% Layer 2
b2 = [-0.087025167335969849658;0.37756793856402448561;-0.2546611183567079606];
LW2_1 = [1.2940311905484152 -0.37754852755242551687;0.092186036822366104748 1.0769959047288997223;-0.36074659686682730708 -1.6832551996180247222];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.326550050494534;0.272949142063996;0.11331369627814];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[0 1]-1,2)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[0 1]-1,2)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
