function [y1] = flex_thumb_y(x1)
%FLEX_THUMB_Y neural network simulation function.
%
% Auto-generated by MATLAB, 02-Aug-2019 17:36:43.
% 
% [y1] = flex_thumb_y(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [55.0872957664198;27.1156434515906];
x1_step1.gain = [0.137170066897646;0.347969480641399];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.05432076911829608612;-0.054332692792035675033;0.054335847762570228803;-0.2655783962151078148;0.054337802130804246925;0.12847211691991272664;-0.054315646431729057431;-0.054156285481734213472;-0.84236955312095007642;-0.054319122513213455306];
IW1_1 = [-0.10003360261502110273 -0.066725173200872470169;-0.10008267189732218683 -0.066757955649148228994;0.1000956914408727555 0.066766654018103069324;-0.4447425564744858506 1.3531206317817963125;0.10010376410323798546 0.066772047415244520363;1.4920901723573065656 -1.1151896920977961702;-0.10001258658309485072 -0.066711133083561788282;-0.099376740628771373376 -0.066286447721338834227;-0.83256256941064066268 -0.58620652423108376983;-0.10002684310316292682 -0.06672065736951686421];

% Layer 2
b2 = -0.52923552216901159628;
LW2_1 = [0.14158512003606887886 0.14165818246878131292 -0.14167756611750595419 -0.97201394886039926835 -0.14168958436827069902 -1.3479416497996674629 0.14155382430984397857 0.14060602331117225128 -1.0899042601853108359 0.14157505443836809755];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.135326913911388;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
