function [y1] = flex_middle_z(x1)
%FLEX_MIDDLE_Z neural network simulation function.
%
% Auto-generated by MATLAB, 08-Aug-2019 10:16:41.
% 
% [y1] = flex_middle_z(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 59.8362059788327;
x1_step1.gain = 0.155349197573605;
x1_step1.ymin = -1;

% Layer 1
b1 = [3.822527485441848949;3.8249931822751492838;-1.8753423386499497028;-0.86007037563244814748;-1.3041910770434677058;-0.94797425218667374924;1.667668453001508011;-2.6906782878714565754;-4.3832001992804370261;-3.8771147108053916064];
IW1_1 = [-3.7416191045916926683;-4.612500231052181654;4.8105167410528943961;4.2250580221648545987;2.9182840445856434997;-4.0199382271165893243;4.120871959087923031;-4.4478193340021823232;-6.0057431193887973464;-4.5962600675088696178];

% Layer 2
b2 = 0.34416045137237549767;
LW2_1 = [0.30549046255628115043 -0.77527316543475954802 0.75549211502684421315 0.012051468577309472005 -1.0278841011884523038 -0.12852192199473896905 0.68213880314199737409 1.4572490400117315001 -2.0637066147292695284 1.259031947638936888];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0897665629343387;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
