function [y1,xf1,xf2] = imu_index_model(x1,x2,xi1,xi2)
%IMU_INDEX_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 18:05:11.
% 
% [y1,xf1,xf2] = imu_index_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-40.9104516793358;5.85339039934346;10.7247966975542];
x1_step1.gain = [0.575968181957989;0.171899379746217;0.213602152245085];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.359144811698827;0.176576861448531;0.24853254050117];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.081420422722178170671;0.039465119808062908147;-0.053379739619304103493];
IW1_1 = [0.032628960931163103476 -0.24223816043385168473 0.17419360833725022752 -0.043487766156032829634 0.23974384026767475708 -0.17730533534245063176;-0.084022595635502211886 0.090435984708652841779 -0.1405828440319298045 0.082528098834005955697 -0.097966210552591734273 0.14204489023294439298;-0.040527401888375245986 0.044442282058193394167 0.080058822536806933945 0.042099986850514643788 -0.040731258054287226844 -0.099878085364635466048];
IW1_2 = [0.13709882325205427489 0.1047808268450564767 -0.38890777852192093267 -0.046462079974522230152 -0.038240120730382916314 0.1342539638179957584;0.6372118563758625287 0.66538360300278487358 0.6242999993178662832 -0.29305375210807671493 -0.29070551357075635757 -0.26611431708222194059;0.72077294239489864136 -0.54222437777526222291 0.1719894453670404999 -0.28948135166239430394 0.23863141233730111868 -0.081603236132380241319];

% Layer 2
b2 = [0.12935831879517797893;-0.0040152284895064432185;-0.21703304554695926343];
LW2_1 = [1.5660158613538743833 0.86721032078407844779 1.2765213405084954168;1.3761886181625730963 1.3387999852896601549 -1.3193800738254553018;-2.9537146106073106644 0.52395172387164234973 0.137004597903036901];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.359144811698827;0.176576861448531;0.24853254050117];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
