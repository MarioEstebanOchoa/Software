function [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2)
%IMU_MIDDLE_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 13-Aug-2019 17:53:02.
% 
% [y1,xf1,xf2] = imu_middle_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-63.1908079948732;-0.974204308087121;30.323395437964];
x1_step1.gain = [0.0616560410796097;0.265614301889622;0.131467380673325];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;0;0];
x2_step1.gain = [0.180327102618658;0.255732540056642;0.13365332268306];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.078028851987728936601;-0.11155587875199335368;-0.016965217691502873509];
IW1_1 = [-0.022925393060884903529 0.09820266162102597729 -0.019889020512990317202 0.019153616600622095506 -0.094631724825247426347 0.024511192075308271127;-0.027696948302487495869 -0.030767635909803112831 -0.005403913169496291774 0.020772617758872520544 0.034520964007749378732 -0.0014145842965866393427;-0.022765801520975192246 -0.017025018980270086727 -0.017120145996410703754 0.015888225708749252607 0.017481998981280694183 0.018549919088669476058];
IW1_2 = [-0.64239095665586509742 -0.62222924587603734015 -0.77063207635535757589 0.22578670241938300633 0.30963479045261488309 0.26795168517175416145;0.57260165289658326859 -0.10211081376528660658 -0.25660279769738086886 -0.22001310519394523535 0.045819627142633483075 0.11140191999404658318;0.18047011146839136986 -0.75196566381016261005 0.062718596132978018942 -0.040479952645509208187 0.31995386576787526733 -0.0086910694229238531078];

% Layer 2
b2 = [0.16877167151541130896;-0.014046655483413548679;-0.27385670491699953821];
LW2_1 = [-0.70261766264904534918 2.1459095984454981121 0.22381364180179072476;-0.38614729507807449282 0.45609229787153510172 -2.0840405038258342785;-1.2223182221311439388 -2.0850570270735357958 1.1709034354320071447];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.180327102618658;0.255732540056642;0.13365332268306];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
