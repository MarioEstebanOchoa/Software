function [y1,xf1,xf2] = middle_bm_nnm_exp5(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP5 neural network simulation function.
%
% Auto-generated by MATLAB, 12-Sep-2019 21:11:10.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp5(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 16xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 16x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 16x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.4583;-0.1074;0.6659;0.4458;-0.4967;0.119;0.5264;0.3897;-0.4931;-0.0778;0.7581;-0.3316;-0.4389;0.0175;0.8263;0.2515];
x1_step1.gain = [9.69932104752667;6.99790062981106;12.5549278091651;10.0150225338007;11.883541295306;8.64304235090752;6.82826903379993;7.19683339330695;5.53556601162469;4.55788514129444;9.53288846520496;2.52334090335604;11.8063754427391;10.6951871657754;21.9298245614035;11.8764845605701];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];
x2_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.60925930539347228354;-0.24131803071745783207;-0.63540137186073564202;-0.051969871844130058336;-0.19658868739933316183;0.44662820620999715837];
IW1_1 = [-0.13684274874500348962 0.69467535146265724233 0.16703582270781830443 1.028563144284746933 -0.31752811973264710721 0.41382585076569172733 0.80521061462828080746 0.42671338352578647157 0.69430181592973916338 -0.19527445047324998306 -0.9878211413935910068 -0.38274825093031517032 1.6965117011805181946 -0.77063873755803546928 0.60058263325186156401 -0.30908751235177905903 -0.37542136500284922773 -1.1049762182490909801 0.94356500145116206646 0.050856261461180468642 -0.94915000807839089436 0.36036655456510413575 0.31837438698455783337 -0.17540267710786874855 -0.79359398719571594416 -0.29884887064527426714 0.69976450126445588484 0.36968814772719665873 0.10876461736370175715 0.40394436974779518446 -1.5745677141493004125 -0.43056806910146694367;0.1265395333058063343 0.64235489208890028667 0.0516822175361850919 0.27384128168779264811 -0.21397693407112869379 0.19830130590415184777 0.01283883392287074772 0.21236224969295555698 0.51429721722467480749 -0.14195674569035865442 -0.56606285239159492839 0.043360187695858323775 0.3502428169018672599 -0.26455557801508006177 0.16414249551840029429 -0.28739600905511220041 -0.013251336155228004773 -0.72761769430500844447 0.12407263844041259426 -0.20177827527859842904 -0.25203324100433849297 0.031247076860986641722 0.66909324518559110118 -0.021751570779265549244 -0.52858821674791300893 -0.15226918960152741045 0.39310319372669172422 0.051936796724883160792 0.18334789598288994683 0.28835851541517731889 -0.59203177004237872438 0.10108240392249961959;-0.32691920867013002372 -0.083250752715207876342 0.24670387405496518873 0.81615852190953330769 0.061318511171277075011 0.23079543510249789229 0.51395040275607817293 0.37241151510734199492 0.087263482288714416812 0.052289195178801629871 -0.24724027811064488991 -0.21935036575873281817 0.79063069108400396701 -0.44050174784467677203 0.35260534153192013562 0.035826530533663206168 -0.17019344095381308546 -0.1328141883840355808 0.60838710842341070517 0.044907060063731088495 -0.66081846061189686292 0.085006782980247649895 -0.0023609041519978566162 -0.32919793833184485266 -0.096719371504295187369 -0.20511898183398355466 0.12049757478281189482 0.093123649387055973392 0.053582821152859963498 0.26325020169078017229 -0.81174020346827857608 -0.3974595571928081772;0.029882675556919015281 0.23996811706376694473 0.11510031007262844227 0.049310501277601372083 -0.06812468008242612838 -0.071177415606337113285 0.078459709486036130488 0.032876216194488869227 0.17477343205461570719 -0.10941903906272035241 -0.14660022615304041382 0.061651252111388298027 0.042031045941547363898 0.10902013640886250301 -0.039450928524678678666 -0.15724548669803617429 0.086045060593537045501 -0.25434603286636098263 -0.18419082959492893981 -0.14071759705484079839 -0.0076650317361374054742 0.12843588511399062213 0.027357976489512575435 0.018797151232909169172 -0.17532646824507205907 0.045080168603625452028 0.12294373614577491782 0.0085655218369209730478 0.030442086654280872682 -0.056052029367802409798 -0.025694686414845627903 0.11386304902259390681;0.099560698360162444565 -0.26020590223649214812 0.10917752564702579154 0.0024195673638766558751 0.20833101510068957607 0.14479448602607297714 -0.61041469689045313451 0.4319074541857225169 0.077078069943114696505 0.1917946573609794203 0.011677247147907568112 0.32924919212979125716 -1.1750233659356326132 0.19392441227137435789 -0.19395761197846356216 -0.035705502035704564379 0.3803440526233655139 0.46226226386787938605 -0.3573675538128072704 -0.46713525204797684554 0.027043859516231560924 -0.51774850959085083613 1.1735166840326596294 -0.3211599643575385743 0.076761954979850111069 -0.24773343730404417951 -0.12140542939128860789 -0.32842017176860260896 0.45145769755942355417 0.23875042496868995046 0.18089959935501945254 0.43409604756037878381;-0.25576315201619026496 -0.57420502169609544119 0.17711827031269516963 -0.050180525101539662225 0.30432417242844594929 -0.23253543105268767444 0.022222956393108315304 -0.16183431114596691369 -0.61229598196056622683 0.10819624856306918337 0.69905229392455459081 0.04707597556151916357 -0.51084001753083796427 0.23448394667544511516 -0.19752969409085932573 0.32192300306026683243 0.14817076582145885522 0.69739401678989054734 -0.34193697837158748554 -0.004517227849200972957 0.2708011615103851355 -0.11336792015401898903 -0.79756866925995240081 -0.10316569483294095455 0.65759695997689959768 0.22366442509887402013 -0.53450881958950435813 -0.21284224812981705766 -0.27047115179041231192 -0.12892479347789478905 0.74449045218429787951 -0.05008214601457540438];
IW1_2 = [0.69546562937932754345 -0.19119366912634649935 -0.325985802636985178 -0.33416489410967215035 0.28602189824408624785 0.027365190277099812888;-0.18484955662749616434 0.87736094776113870974 0.076235207784433045575 -0.096198931228753711831 -0.48457292856897360434 -0.054955886801270489861;0.97736674360463016153 -0.73079668193041880109 0.14924211427549488596 -0.6787190413592951721 0.70568091787847420093 -0.29233378862735842629;0.039686386202198907502 0.11686322705747428929 -0.76814530815017834087 0.0096536748718981917755 -0.21393299965931672491 0.40293993720626086752;1.4380323894467388346 -0.0062441240121100492766 0.9604956724942802504 -1.6109960966297094398 -0.037419153424026574406 -0.87266794974661066053;-0.030486957729087514612 -0.080199585248169238949 0.16785767896049344494 0.074577239688812455021 0.27842385077012771211 0.025243310108142368031];

% Layer 2
b2 = [0.98890810447292509799;0.21598082334808030303;-0.88182013261985481289;0.83991351473970343733;-0.42041281700188537496;-0.33284928007549585693;0.51001939237621762846;1.3774114875135354819];
LW2_1 = [-0.39224600295371764291 -0.4423050040973826591 1.9637132648539801227 -0.5153281321389859837 1.1347558191665070293 0.57690282677856674631;0.091204385894303463544 0.35302910750857513511 1.1825832181365916185 0.67384727376823438938 0.11454724662685077108 1.3636257022935700522;0.86169235418324696685 -1.4199913934344099431 -0.10395143490888507365 -0.4159833582048530487 0.83337058068959923851 0.9265089565180553155;0.920176081232954024 -1.5618596986350810063 -1.8238917484249694834 -0.31793473474349692731 1.4670105050865411833 0.80466077375902456126;1.3268748253027258244 -0.49282378272222571169 -1.1282893748836839709 0.40225860087431497547 -0.52186711522052542378 0.20735145035060412178;0.94290734984996749102 -0.11367621560297466732 -1.0158158863418425 0.29380687016886575247 0.80391167917512729169 1.2970887653069509415;-0.94448011713688473368 -0.13597657329604442844 0.9517548457935920414 0.63217786613194615342 0.16543232464676629889 -0.61083899045251466298;-1.4105782078749085073 -1.2515354368748363711 -2.3052903912770976724 -0.46606361773688498307 1.2118595777543452741 0.53820165659126917301];

% Layer 3
b3 = [-0.099714302446547678493;-0.27800575018035400543;0.19439433084949989117];
LW3_2 = [0.24874254798023240354 -1.2189027581654496846 1.4542049225350450747 2.3742049261199307253 1.7445368188078240745 2.1224048179382477564 -0.66658239354909387675 -1.0087583725356910058;-0.55747292187244446016 0.50170307718731399493 -0.27897672298483694453 0.91906455858113866864 -0.10768792414536508539 1.351207514006063537 -1.0242453611361399535 -0.43845420780629801305;0.56898419903649577467 -1.1691844897971472861 0.83697537211551609193 0.83096292718884945394 -0.29400917002095039443 -0.34272180079519037887 -2.0698005085126554015 -0.29835198902660275966];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
y1_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(16,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),32,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = tansig_apply(b2 + LW2_1*a1);
    
    % Layer 3
    a3 = b3 + LW3_2*a2;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a3,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
