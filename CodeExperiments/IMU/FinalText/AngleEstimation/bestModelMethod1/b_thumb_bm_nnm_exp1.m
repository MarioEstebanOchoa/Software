function [y1,xf1,xf2] = thumb_bm_nnm_exp1(x1,x2,xi1,xi2)
%THUMB_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2019 18:41:49.
% 
% [y1,xf1,xf2] = thumb_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 8xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 8x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 8x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.7201;0.0064;0.5702;0.2422;0.0864;0.1523;0.9267;0.0585];
x1_step1.gain = [5.35762121618002;6.53167864141084;8.06776926179911;6.4246707356248;11.4025085518814;17.4216027874564;43.1965442764579;23.5017626321974];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [19.91904251;2.583829047;15.72255665];
x2_step1.gain = [0.0470926729892737;0.0376234231319031;0.06953254154686];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.6994838950643944564;-0.29132486493411624551;-0.48316456983592026564;-0.0029794544106394168712;0.096088879495662304908];
IW1_1 = [-0.3287585623309725591 0.12084162815993858275 0.46148812973063657594 0.15595102587768938651 -0.63052729206216873159 -0.015606931633327904979 -0.62433755217429254269 0.27981984927937192387 -0.21995763043694391281 0.17207174208601763721 0.44171120148384768189 0.33657115884898181069 0.27899766421931626592 -0.2843245231614684454 0.33068869443780329886 -0.15520152935701256314;0.99449446187451895351 -0.59062076110883809932 -0.87829605233325847014 -0.15539031457909963096 -0.651874842643659691 0.76349794515819513485 -0.084461720961487504744 0.47836002651775433314 -1.0400373117752768071 -0.044309004694874615238 0.62833992648396175262 0.7255303987828677359 0.9391630234495796925 -0.86758716934136215215 0.1622450709972132199 -0.677030289225520443;0.66509831352352299927 -0.3622608304606526608 -0.51399432530447486389 -0.040893825303545690286 -0.79104065510008803042 0.42584919046023972378 -0.28662641296896718135 0.29909153410349770263 -0.77720535451082695122 -0.013092990672687772336 0.40821871632431239174 0.46543836368633118017 0.97756050097641045138 -0.48432901504359238132 0.33334685974095368266 -0.44084068135199389049;0.52664089043570927462 -0.32056931860656545652 -0.6787259733699245734 -0.11563176972808446308 0.2698480459021151967 0.27591112472565187952 0.38912494546519338368 -0.13587269580355176846 -0.25878156403733681978 -0.12468260159398472653 -0.15245299426684047472 -0.074756040519802974265 0.13080352783641749359 -0.094255337901590532934 -0.18211365507045473855 -0.095879978084542696881;0.27508793948965926113 -0.087913352590654622598 -0.31822109329840647662 -0.19440718487585950669 0.18556454220178433823 0.25351818246628449183 0.037851113024750276947 -0.10660939310141410996 -0.040378512015945805524 -0.13224921793618893417 -0.14813357676338753666 0.026002135781955072746 -0.0045471980779017715305 -0.084839676384105819351 0.11010809691178477521 0.025753256727110623858];
IW1_2 = [-0.20033110130865508514 -0.7583030486261371772 0.64708957918781306873 0.5330121835789221052 0.86498529055742368055 -1.0676094549375618747;0.035259651749501561002 2.1814915195878592513 -0.42875583383184873165 0.03612447195785020021 -1.5959568399842760655 -0.053969241576622466183;0.19347545421508460795 1.0132634189336617858 0.08597547361327362303 -0.050090945348467967591 -0.98956201215286843098 -0.098444831922686951153;0.16777234758696915606 0.78333994020502484279 -0.87834849261262260001 -0.39532981626655572249 -1.0855965416356698761 0.77053536126001109796;0.75428674554566976784 1.3724357144498915417 -1.0951388711618317284 -0.52779764180406296692 -1.0425718969375581402 0.86303873351471493969];

% Layer 2
b2 = [0.98228395598460693794;-1.0524245634502928937;-0.4584848928891464559];
LW2_1 = [1.0450109980849320301 -1.5613539169603378731 2.1953080995896252503 -0.28972829697284629979 1.6439486202701427686;-1.2200743508992011321 1.1461675533809416727 -1.3837386939329772151 -1.2685273400258261223 0.41043236413405120855;-1.4704886192250437027 -0.28445372934630108741 1.1107057473576038564 -1.3585435197421782405 -0.6195260043364992919];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0470926729892737;0.0376234231319031;0.06953254154686];
y1_step1.xoffset = [19.91904251;2.583829047;15.72255665];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(8,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),16,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
