function [y1,xf1,xf2] = index_nnm(x1,x2,xi1,xi2)
%INDEX_NNM neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2019 15:27:15.
% 
% [y1,xf1,xf2] = index_nnm(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 8xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 8x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 8x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.454;0.0308;0.7706;-0.3328;-0.1492;0.0097;0.8919;0.1582];
x1_step1.gain = [3.14415972331394;3.44887049491292;9.12408759124087;2.69978401727862;6.37958532695375;14.2857142857143;23.2288037166086;7.49063670411985];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.22038887;-54.61491337;-33.15052065];
x2_step1.gain = [0.0202971975872209;0.0423350850978253;0.0363858278153968];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.09304880472649847134;0.1490415171744085554;-0.031078064633902464237];
IW1_1 = [-0.15999813787126709874 0.13777823005002309831 0.066638741148335511877 0.054092711258637085625 0.47113456073323839446 0.1739359327328765803 0.39764107261962644557 0.10880521742005841435 0.22618899514629597913 -0.098315972754797184563 -0.04866581469401656812 -0.0749863395815523609 -0.37060754023290193304 -0.16575606304346585107 -0.20978804670044212677 0.037885119132714861756;-0.14548467436234371886 0.057333284647558810376 0.11176033884169722654 0.078722165294379309319 0.29437762535614087067 0.080649777480795534212 0.12445755449247303259 -0.041450273562842081254 0.11326258654632313794 -0.009628375029244049671 -0.060816017109886565117 -0.088076533013608904188 -0.2673066191448896789 -0.095590447044036436219 -0.04508880855114856534 0.11926554000866350369;-0.070282152091935681804 -0.0041235323299272904143 0.050574315328602445496 0.044318053059274352401 0.14748953537575948403 0.10277696192718495383 -0.073966758433043525156 -0.014529449213937810012 0.052880090920973184254 0.017867927291842930493 -0.021366058964331059722 -0.089724599486255551817 -0.11600071696224546758 -0.093528599074610099806 0.060597264183996212006 -0.024876501848910697462];
IW1_2 = [-0.029754660928717365648 -1.0283991490241939371 0.51250268068893134465 -0.083323804287793165613 0.47339481149919571124 -0.43347674330702307133;-0.28415378968236082446 0.15224534924445373707 0.97886685710347487444 0.17279120063549888164 -0.06102091402265368697 -0.46489629270412785589;-0.85970736520283297377 -0.22404056024810162229 -0.60861764637078474838 0.39805034869139638287 0.014051832000178090393 0.17884272151838537246];

% Layer 2
b2 = [0.23518795917272286577;-0.10150012058200638676;-0.26810819757602533109];
LW2_1 = [0.43821308552867760389 -1.4775157317907536836 -1.4965643096448266736;-1.4518182689372263194 0.4113410179323694349 0.28381800515291377707;0.22068165743603257445 1.4800869944819556867 -0.46093854878482981574];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0202971975872209;0.0423350850978253;0.0363858278153968];
y1_step1.xoffset = [-34.22038887;-54.61491337;-33.15052065];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(8,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),16,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
