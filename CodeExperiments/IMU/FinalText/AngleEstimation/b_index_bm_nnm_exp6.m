function [y1,xf1,xf2] = index_bm_nnm_exp6(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP6 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 17:30:01.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp6(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-33.7406296948085;-57.1221176756341;-19.7284169437486;-33.7618349904975;-57.8590179250591;-19.3952408506384];
x1_step1.gain = [0.0206602845294696;0.0415964149107798;0.0449097649882465;0.0210934199245808;0.0416736727331636;0.0465066896592033];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.19847369056505531626;-0.40338849573429053086;0.095511095355887587477;-0.043724276846411024022];
IW1_1 = [-0.25722576824434595366 -0.1848086152338923871 -0.40706696230319233676 0.55771256085172438155 0.050561191617714947022 0.29754267883924945259 0.043400135547294542426 0.12300936589225197615 0.098603956091443942245 0.085027738203534847239 -0.10852708999760911357 -0.025363657566771013324;0.27789138772555005419 0.14298137536953009485 0.36674752745120486885 -0.19129266233168309985 0.42225945748908066957 0.32389561163960800538 -0.096037783136974960718 -0.048325192017048559934 -0.069771273525623497824 0.010017040870228222441 0.18651483661328691066 0.02035402145202671112;-0.30413833444757792934 -0.17587129881395627273 -0.27341550860764252118 0.49892728868644925511 -0.87222738266569910248 -0.42149170725118995096 -0.0063717346801275111592 0.16516479619739615758 -0.050770209118076961574 0.11379578134577120196 -0.43637441546498800804 -0.02609949098393207767;0.075473937374378533005 0.15486983949441779362 0.26475233811925791283 -0.52880860428082987479 0.19615763693281892954 -0.12100837158028109053 -0.1168143481902684383 -0.22377381653096478642 -0.1482417568276493125 -0.072309278920934208501 0.22943558881948608597 0.055329439393523666135];
IW1_2 = [1.1509952133097762772 0.58312333584582665136 1.01354089559972671 -1.0621488647250825199 0.0056642731454911287442 -0.14091186493050156248;-0.95649586805707520476 0.39903855368882895638 -0.8292110513545009054 0.69767097750710371784 -0.80908129261576533509 -0.28599146663596458628;1.246848373716068048 -0.094180063925944842995 -1.1366477887419543791 -1.4036714250408321991 1.2583707876779592905 1.7868056527164535296;-0.13924026749979517836 -0.54276200401138530172 0.0768414575641977321 0.86048030416512566454 -0.15340398758068013452 -0.44791110949476081737];

% Layer 2
b2 = [0.030619871761286429623;0.4290082265546409368;-0.45838485903387543585];
LW2_1 = [1.5252097358983391917 0.84973114009670303037 1.1865599630110612583 2.3087332223589767111;0.95215771409857496987 1.9054301335769303627 0.2007330347497368328 -0.25694216030922584215;-0.24488444397819725262 -1.4313226325814161211 -1.1526978603278408286 -0.98905538314723862037];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
