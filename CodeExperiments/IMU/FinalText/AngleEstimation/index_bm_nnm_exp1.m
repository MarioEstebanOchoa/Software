function [y1,xf1,xf2] = index_bm_nnm_exp1(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:48:29.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.395772409889456;-0.213973625786001;-0.171029829618809;-0.114024872232584];
x1_step1.gain = [2.91053271833029;4.36005106969928;6.72874898186058;10.1997260884364];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.34455365217290778723;0.053324032617122284206;0.10249483524077501739;0.23825370663353823142;0.015616316348947143627];
IW1_1 = [-0.11752114068756698562 1.0985934994640715878 0.45470900987131812609 0.039662851446133164102 0.33233716158661852358 -1.1434240366077468298 -0.53717167749639482821 -0.092783037892303549254;0.22732548802151955614 -0.24530073573020186317 -0.33194888943652972602 -0.50154325718228687236 -0.26314244888607901673 0.11810822958625193102 0.35230990074759088726 0.33119207954240548197;0.29944891228785230908 -1.8614958996445838402 -0.750524374574008446 -0.36781673849532153797 -0.70167029407487280235 1.8670846490061867584 0.87383409169968007113 0.30845337818388196549;0.055478506682214261125 -0.50048241615582567121 -0.23221557508791848545 -0.062915472957258647413 -0.17333863708704197459 0.49510091895394259254 0.23889161141724193915 0.072334763899162810019;-0.32276391108420426912 1.24847879507147419 0.66053974742148391375 0.45948114417711388713 0.62393830977081299327 -1.1136406731337944453 -0.72392604069125832122 -0.32852244363854871123];
IW1_2 = [0.33650106606214319482 0.50962760851089083936 0.40514511370933520285 -0.024318428060114825884 -0.69675972579688505437 0.32127417770561483845;1.8630474862346217968 -0.23699961967205387947 -0.79699167522521563445 -1.4973825867959598135 0.046733576622242645193 0.93692160207552299678;1.6046228287479276098 -1.2695594103494898253 1.6980953083745564669 -1.2740106964166273418 1.2679560435156091991 -1.2615514324420720182;0.86617068971270083644 0.1479522940256758623 1.1200313321911228304 -0.38398100634319209945 0.2263714546116512849 -0.61342645153360708665;-0.72954285486471615041 0.28390488606864888732 -0.11558225037539475444 0.92550029702079550376 -0.47734204806325475356 0.057609531703376216927];

% Layer 2
b2 = [-0.030887722011458836752;-0.095842063895842710686;-0.36988005973861343145];
LW2_1 = [-0.835276142467296423 1.1976202600146816923 0.0060257384161918935497 1.006905174759318955 1.2839111783350287688;-0.34864109561855821662 -0.028106763881823010331 -1.4445035929181797574 1.5508480375407187601 -1.0147368554759825798;1.2314158112276971657 -0.86384304289781765895 0.55085348221049679207 -0.18994139968485318493 -0.49855985951579734339];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
