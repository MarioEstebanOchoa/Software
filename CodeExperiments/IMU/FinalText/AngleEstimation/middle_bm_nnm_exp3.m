function [y1,xf1,xf2] = middle_bm_nnm_exp3(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP3 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 15:02:31.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp3(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.409771644189749;-0.338406207201333;-0.203058649071918;-0.16419875262578];
x1_step1.gain = [2.27990427281999;3.24512785081417;4.34636578207219;6.30741808504808];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.061023795965313057388;-55.199815425809951819;0.014317593147666523093;-0.12696335661901916869;0.057464518311488799185];
IW1_1 = [-0.16545117298570877207 0.72917152747764246712 1.1323788922327753248 0.31676527932777620578 0.30277360935626951299 -0.73039083489374256875 -1.0377328326609502884 -0.43508375837515655959;1.6368086615827173169 -12.972802647308364854 2.5096609712538642256 -1.7646497426071918735 37.580452558327870349 13.568059811583992769 -7.0117300337219941042 -3.4549638226751593351;-0.013377729587702733363 0.21493955578211659807 0.20014380032788445241 0.098485825220717818085 0.051552443683665322149 -0.18514241312161930364 -0.16914947824487927552 -0.12523031028710254753;-0.0079655175946731441444 -0.49054031777116996471 -0.54915772065669943292 -0.21863404527663424237 -0.10391556197998783051 0.37496055080854850949 0.46249333329730457631 0.30000426074734021231;0.026261320949192437646 -0.28548797625733601802 -0.34322323067380355877 -0.12757951028350597578 -0.085495117938042639039 0.2456944421757183139 0.29356361522089696736 0.17802226465113582532];
IW1_2 = [-3.461479067032745327 0.63266103914206073267 -0.37923459309498946945 3.0359649633133418689 -0.56442394174859977785 0.34864184808993925468;-6.7872111867392153073 -14.719989759751674896 -3.8725889023737751771 21.361112138506474167 -0.59543296433767434195 11.035683003757311482;-0.16910669807805916998 -0.12399307651746181713 -0.14633240264510516404 0.36574904328321367064 -0.0057025934921619090417 0.074450109612125905945;1.1363952246606419116 0.21209741171021875838 -0.30773934991069284983 -1.2608649079792835224 -0.03067492573453203808 0.077553604890737204425;0.32506647960160228727 -0.034661224261741480079 0.07761925224220464492 -0.65094506316312539251 0.075647572067899918058 -0.092467961262330519712];

% Layer 2
b2 = [-7.0078370211971634518;-0.25536454525440610563;1.3419719109398471346];
LW2_1 = [-0.67185457997758335491 -7.267142870767486329 -0.65534506486166832495 0.54582692252942766054 -2.7655002882471948489;0.4035203050442275341 -0.74161417680330810054 -4.8742947786803423327 1.6523329706308733655 -4.282524776889743201;-0.62300497719428904464 1.3987192889773480964 -5.404107482483327729 -2.086178363508089717 -1.6476147632783968433];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
