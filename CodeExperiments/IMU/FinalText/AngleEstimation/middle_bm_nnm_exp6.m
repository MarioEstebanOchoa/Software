function [y1,xf1,xf2] = middle_bm_nnm_exp6(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP6 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 17:30:33.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp6(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-33.3794195268759;-53.3588386163538;-13.5443328621949;-32.6258244121565;-54.0490170129025;-16.0220673198034];
x1_step1.gain = [0.0208432786207998;0.042177224182716;0.0752167513380959;0.021033281500451;0.0420727776313228;0.0706436629487186];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.034298998361992932837;-0.067481088797001195778;-0.098749248698214858733;-0.028373935107286297336];
IW1_1 = [-0.021548201164377056571 0.077250610825225510259 -0.30436718935035778077 -0.051653597785048500912 -0.11963780257000580787 0.14254667398983084103 0.13313025829646893405 -0.01573818393760182538 -0.061771351619063032123 -0.11681758256259676398 0.0022272840743885078882 0.077246054071943973107;0.14704866578503086871 0.40218137401366438333 1.8442361736620327406 0.65861499651146626633 -0.32855109604328702755 -0.87095342388462870797 -0.74726722517538723967 0.12272196933788688533 0.58744358292518239484 0.50313799828162542038 0.42632966467093386109 -0.24810062115924053083;-0.14554945840271582558 -0.19917130407242172874 0.030331579570940108564 0.038329799544852584392 0.096836130555464500214 -0.18226242037955495134 0.063429482721318014571 0.052147479586362177617 -0.19401030020887349847 -0.038073880265286880187 -0.16115399869769966856 0.095309596625309828122;0.12560830469721559477 -0.09084292784587547076 -1.4296894776862658638 -0.57855799780850802883 0.20636447642983987705 0.76902549139552356383 0.43484242644148296542 -0.061235464391160343567 -0.42720311848903025354 -0.46503074541277084064 -0.23921345626870949008 0.26147188604589199912];
IW1_2 = [-0.007073302001487508095 -0.77871675355608693803 -0.00032669745181244751447 0.14690754769572467175 0.32256140470998517777 0.068272125826470228538;1.9964225904837669123 -0.17405902553445204428 0.3558302790709947927 -2.4812821554036483818 -0.51245204559315504778 -1.4386670714262534965;0.081289596567227284662 0.043522888324403409543 -0.58894425722113386001 0.17308315686276040668 0.1623193049577080771 0.48266398581693353842;-0.37003127732465473931 -0.38019554515257286686 0.53137484120827371825 1.3353465457614253076 0.36538013835132454599 0.56173488310131114432];

% Layer 2
b2 = [0.3245297923289759412;0.13310355795563186265;-0.22269554953238679396];
LW2_1 = [-0.64456183336248396021 1.1233805219292689603 1.8455245155312696159 1.2867089371023865407;-1.9786853610174020002 -0.012412636723291100085 0.45230365171155495485 0.18414027311952133048;-0.36492463656126516991 0.23196938119322724203 -2.0237871177449582305 0.76096904614026894542];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
