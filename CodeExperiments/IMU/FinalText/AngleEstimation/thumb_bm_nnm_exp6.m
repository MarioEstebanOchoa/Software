function [y1,xf1,xf2] = thumb_bm_nnm_exp6(x1,x2,xi1,xi2)
%THUMB_BM_NNM_EXP6 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 17:31:11.
% 
% [y1,xf1,xf2] = thumb_bm_nnm_exp6(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.0614759468729;8.17122518427077;25.2646775604467;-4.10022324292239;6.9020664592297;24.9175021200314];
x1_step1.gain = [0.0357178119857917;0.0369756476389131;0.0596712613290543;0.0368362107940123;0.0358002095604124;0.059966120575698];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-4.60253906;8.007185151;25.69303831];
x2_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.060713949035513012364;0.14609340868643558298;-0.068515120912000862519];
IW1_1 = [-0.03139183597681833443 0.013329336746464519325 -0.038776902110889542585 0.081781284356875663666 -0.15276454535642858268 -0.044701780535191894261 0.027207309066085483273 0.034194263221844829748 0.040241429030216262219 0.034349925366021716311 0.088729032696858972651 -0.10658423471968392349;0.0053331315082567600991 0.086548603954250583059 -0.14981871349892544876 -0.14115320571135622774 -0.21341956905553630119 0.03249429620795691448 -0.031507039667556607787 0.017315925325765719328 0.02982285035309541546 0.015884759195473607818 0.073172730118622172912 -0.053291707066946025773;-0.0262121435958560349 -0.0042845294274628702505 -0.02198690002202533661 -0.10115911543512198789 -0.043799504279640806559 0.051866315937388836332 -0.02331697876610032763 -0.0047265312929910029485 0.03007460209465529985 0.051392744741962356758 -0.0087114615413841564595 0.034597926132192195758];
IW1_2 = [0.31797360678165920156 -0.44407631832128069416 -0.4912288682735541645 -0.25443848777926225679 0.08587567218862890428 0.30416371577425527217;-0.68138908866763414629 -0.2958586420670574757 -0.13084587640004383124 0.36210067966368475467 -0.0068047507317214707759 0.07943418628268152093;0.28324386512627786061 0.59725066043620500533 -0.65905223150954606037 -0.10100124628447974817 -0.19802749733898603046 0.26760293633999004959];

% Layer 2
b2 = [0.29268849609012415058;0.056385556924627495967;-0.072484796711400872882];
LW2_1 = [1.221409132025943034 -1.6750624537194984676 -0.3410207760278887168;-1.2042766902540922302 -0.21460892645713108839 1.460957524887844361;-0.99435165361267530137 -0.75389610893804637204 -1.7725006336532873608];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
y1_step1.xoffset = [-4.60253906;8.007185151;25.69303831];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
