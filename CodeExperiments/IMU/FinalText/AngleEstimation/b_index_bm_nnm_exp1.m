function [y1,xf1,xf2] = index_bm_nnm_exp1(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 16:58:14.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.395772409889456;-0.213973625786001;-0.171029829618809;-0.114024872232584];
x1_step1.gain = [2.91053271833029;4.36005106969928;6.72874898186058;10.1997260884364];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.071151494982263474576;0.35505410196871023398;0.027137542959558787203;0.25426924262322198045;-0.050688947976895326608];
IW1_1 = [-0.2798318562298209855 0.24636460798751896872 0.38823804926166782803 0.85941750957887519391 -0.0091484136288846138602 -0.37819822749083903402 -0.53079773457765788702 -0.7227562982753047427;-0.20866246783077743721 0.75204989914280850893 0.54162914484340629606 -0.18794869803457231461 0.39526071800318435256 -0.50487960553698485455 -0.60326716926061740853 0.20879945830017157538;-0.30816432854008413145 0.71479917155034011778 0.42759309876301088149 0.093770735259740542467 0.33722494297381711004 -0.67870920559276959327 -0.60480479596256153663 -0.012043211113796851996;0.19394598762944112447 -0.66020211582948529205 -0.53668591601131176994 -0.010190481121891503333 -0.33542808344170088608 0.51606119807753214612 0.59465765437812523331 -0.036869915598246184862;0.46281871285170916863 -1.2370606302408466703 -1.0223899873824486839 -0.12053608015101843765 -0.68755808656443351268 0.92197923449973229193 1.1600306940239728526 -0.0067573882310995037059];
IW1_2 = [-2.0008540474727150027 0.052004572354118316913 1.7163482111336956226 2.1643094945253511519 -0.11259383328052788298 -1.5614657392196313879;0.60363889285660543571 -0.6525800659233728096 0.5196299963323695037 -0.32753102378149007157 0.68662736761588005763 0.16413188762046629354;-0.57359862146528495241 0.89078609242489392717 0.4913631606454202938 0.86841289588359482643 -0.095074872270962326737 -0.003530218312899320067;0.90401926964296186462 0.39960297876913070114 1.0602216570233424786 -0.48995661370914078692 -0.41502868507294998768 -0.69359399773292329527;0.66432265194903250549 1.1570955759783669858 0.96261743335278693312 -0.66170060954416032306 -1.0661669111821598932 -0.69535040061962871683];

% Layer 2
b2 = [-0.42818914601303253997;0.28868573245766615543;-0.25788851208765661838];
LW2_1 = [-0.71864871743027092243 -0.87331713055205706375 0.33964257647497786419 2.760539866259575259 -1.8079135712495171262;-0.43913640388001179415 -0.68216939649782581956 1.0776800595204765187 -0.23706622392786283471 0.2319407621262494501;0.62568823258420824818 1.3648381184248898901 -0.21338120244120373226 -0.76537423423501937947 1.1511991191802299905];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
