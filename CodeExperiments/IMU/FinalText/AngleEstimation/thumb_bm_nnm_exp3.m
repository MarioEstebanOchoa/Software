function [y1,xf1,xf2] = thumb_bm_nnm_exp3(x1,x2,xi1,xi2)
%THUMB_BM_NNM_EXP3 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 15:03:23.
% 
% [y1,xf1,xf2] = thumb_bm_nnm_exp3(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.272484189700909;-0.21676763725856;-0.180517740526315;-0.162560619199683];
x1_step1.gain = [3.00685442929844;3.19703941041068;4.7419548408214;7.50272416774596];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-4.60253906;8.007185151;25.69303831];
x2_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.17184628225437900695;-0.12500845285724263012;-0.10868155436829311788;0.11471849539356390735;0.15440384751383259831];
IW1_1 = [0.46945975914623228054 0.16326253515665006821 -0.11341693472640577978 -0.50576373383516315396 0.2356328941203030547 -0.10640600339826217224 0.33590780576206513697 0.23288233134250868606;-0.26038330262238879032 -0.30522239129091377485 -0.05260933406698577175 -0.054242763268873721294 -0.041989338246982657599 0.22310684281117224015 -0.16212501914462162933 0.28888208173432011749;-0.36891954292942663596 -0.57413927793467034455 0.051365750718742296532 -0.30662761924114517731 0.1206204027435937437 0.42301525173867920993 -0.24291583575126426964 0.58423099734565309138;0.63008686270520930517 0.58186124659843641016 -0.11722521807410241079 -0.90090693672146893167 0.51499798381625738752 -0.50753556724611603723 0.45875843235362750994 0.51855839566122086115;0.2531822914974845018 0.24580321020892700878 0.10560976273289027216 -0.001496700732112021294 0.10342154013146542813 -0.20863328218603036102 0.047279602697565675795 -0.28115067016171324532];
IW1_2 = [-0.52147304264901261917 0.12030191342536385168 -0.41372506975763306825 0.53757240753620483265 0.23957561252383963168 0.28142086403793392657;-0.32009151697121857039 -1.1091913706601628231 1.5055229302988104578 0.53308468933282437963 0.51309225703017780074 -1.1740695042667905756;0.49576104245713803476 -0.29081674522258010862 1.1248879342986284335 0.52948097774906366375 0.5489864140626965483 -1.257226742893353455;-2.158589895091985067 0.51857580652128454357 -0.39435187879937266819 1.346910123316066521 0.27538011701886327964 0.37743923410603225088;-0.15802620806219971894 0.44976782204672843823 -0.0078762223084999759964 -0.1415815071079349341 -0.027740004629760308535 0.48212381268711101967];

% Layer 2
b2 = [-0.16062856350922774529;0.045596250086452745631;-0.10121568748486688138];
LW2_1 = [1.5436355631572920011 -0.042831770293217143186 0.23223873812956635776 -1.0446970056606319499 0.38079419811317755107;-1.2586917240535742124 -1.0423584969196364458 0.81964691749867002457 0.65189409154392097268 0.52712167073121285465;-0.1031681303349669121 0.8803199659786308251 0.34156429690969680735 -0.026703277322457794063 1.4305813553228881041];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
y1_step1.xoffset = [-4.60253906;8.007185151;25.69303831];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
