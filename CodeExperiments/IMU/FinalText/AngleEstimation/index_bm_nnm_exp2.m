function [y1,xf1,xf2] = index_bm_nnm_exp2(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP2 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:55:35.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp2(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 5xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 5x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 5x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.243305173348851;-0.219825888098686;-0.114146581971269;-0.122262021623615;-0.0996763403382762];
x1_step1.gain = [4.34104126660651;4.49298712468227;8.96062932618266;9.14244933957193;11.3103470004906];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.016519210180517485825;0.317969744774730112;0.0661609947987459035;0.092096767910763654985;0.45755586478842835696];
IW1_1 = [0.16571527418063011772 0.50013238572586848907 0.24577345994254362616 0.042629079280158813092 0.058121917804494133142 -0.051107959713729680939 -0.71423762310052141267 -0.32169516676294329649 -0.15132432351405292192 -0.18980647359565763765;0.33537537461324440358 0.41974042868426336694 0.38448411181086339372 0.071680320175456946341 0.20274841600017406984 0.00090502146073887770796 -0.69381330676846220129 -0.5775647395603544787 -0.17201222856630260516 -0.31987212764562855671;0.55117790821524714762 -0.77382084167982967404 0.074781164512953260393 -0.063381127370513101749 0.35455124084361050452 -0.32845456822186680501 0.59708468627885746827 -0.17693489132154557875 0.14679181091791163039 -0.12828429438619801117;0.0308247370767412536 -0.18106962906914436662 -0.0013900530966688003868 -0.047810218737706695891 -0.013532789741729368826 -0.016668198005220527524 0.13231846581841283372 -0.00040274209582124307141 0.040678566109812491769 0.038079853957804200848;0.032782478608678604359 0.94372000505363407008 0.21560005119751621261 0.16678822183654551381 -0.067742327584968314858 0.092541927539897553268 -1.1328591053598167093 -0.3426793778528238188 -0.32234194880221761492 -0.17156273283293957399];
IW1_2 = [-0.16511616267852519124 0.6952258790157481716 -0.19672322423684968085 0.35129103980722564682 -0.27707458070264134875 0.49806463923745664113;-1.2841963098747426475 -0.78864968156110137887 -0.51072657243738628363 1.1277916137671122332 0.21791590869638699512 0.33915003830624779191;-2.2429950209684621498 -0.02638261080576339429 1.2620524968719863956 1.8755398141485304375 0.0075602767225538018356 -1.0239527123316896073;0.80972548550450296201 0.30289393444089246499 0.87312983769582275251 -0.30020270237891955034 -0.07015257559619748895 -0.38404524873985801392;0.028747282647013545909 -0.51706963016292051272 0.045033576935059355106 0.013847529649157367532 0.054824480675866586743 0.39212385451069747822];

% Layer 2
b2 = [-0.050658729955671319423;0.38963899709967331209;-0.34125917250634779654];
LW2_1 = [-0.37062129212935041034 1.139548239555650655 -0.93899031213403416629 1.6299125218552401595 -0.87208209897272370714;1.3993328635367543455 -0.43726207446236031728 0.05364380258099502724 -0.47776841222391208674 -0.59004136929026107516;-0.24239250847787829901 -0.97078058056545546428 0.81736523952529815951 0.24702382979655207462 1.3050196038568471213];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(5,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
