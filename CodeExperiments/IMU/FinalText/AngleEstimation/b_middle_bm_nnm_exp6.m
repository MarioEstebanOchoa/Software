function [y1,xf1,xf2] = middle_bm_nnm_exp6(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP6 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 17:29:48.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp6(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-33.3794195268759;-53.3588386163538;-13.5443328621949;-32.6258244121565;-54.0490170129025;-16.0220673198034];
x1_step1.gain = [0.0208432786207998;0.042177224182716;0.0752167513380959;0.021033281500451;0.0420727776313228;0.0706436629487186];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.018025009725425186757;-0.19492795688339678573;0.040087348687120522017;-0.12084861790803362591];
IW1_1 = [-0.14138987718603782118 -0.15919112080454778102 0.27917470249492537526 -0.0009283936457130878301 0.099860185044750249261 -0.4154369130365991869 0.070572176900248501097 0.28698484742514396295 -0.1619435781129199281 0.0069562448504106536712 -0.28780365452367162593 0.11992837924405827521;-0.01974401307934550362 0.26216105925916111108 -0.48824875668207956547 -0.068442190372113076435 -0.2299474692868097303 0.4937309911291662412 0.030018758358931633967 -0.20488645145859837871 0.067771422360934877038 -0.062183343123695791754 0.20617691557289485882 -0.029665296089586904588;0.26221733113712469843 -0.016638739914030427347 0.5917683488467667674 0.25359801555492827996 -0.16842826745474726025 -0.35957308554080275043 -0.049687865067741761316 -0.21303724496707540648 0.24500743018105961002 0.0077036132728996627173 0.22432207034060080986 -0.11463766469472096154;0.73917927632022273343 0.10349474746534154113 1.4592702924607665604 0.40357537137135657268 -0.0033341259095075650304 -0.78384349982259104994 -0.53422066667084866509 -0.20568625394794620709 0.19996162420695756667 -0.18016187922288920409 0.22157033928713532056 0.036345854283326747836];
IW1_2 = [0.17638802803191325208 -0.054517334204505239759 -0.72123891480582391633 0.17516155419492585033 -0.00054861207447235121708 0.47966132869592792431;-0.017872646173617907223 -0.69629709878278533974 0.50808371120473949656 0.10567693406792293132 0.2604329346547600843 -0.27753978401821371991;-0.44259091722472182484 0.23983515697434307223 -0.073266310727475941755 -0.76740679000581013547 0.05022253148569920389 -0.45096345809635379753;2.8372092785117217772 -0.075421700889856807537 0.6538014286360278593 -2.9114785483889296103 -0.02585372334224440849 -1.4552039419079325633];

% Layer 2
b2 = [0.03763775786094651632;-0.33419201777256873909;-0.015616794896145987093];
LW2_1 = [0.33059249878785679222 -0.323918559341824841 -0.96590736122830267441 0.55290572916732338982;-1.3216197654965700092 -2.1842683828836526594 -0.46989845726194784392 -0.045395248312831780468;-1.952306376412260347 0.19111728182232229356 -0.76283058038932904932 0.068419018079527965659];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
