function [y1,xf1,xf2] = middle_bm_nnm_exp2(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP2 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 16:58:16.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp2(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 4xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 4x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 4x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.280670768920793;-0.197285173680976;-0.095713331755221;-0.091292338943629];
x1_step1.gain = [3.73961925724051;5.86224493672438;9.64016416728728;12.5337867344187];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.072109086738029889996;0.064605874567303975264;-0.014584426584024994325;-0.31565621345298555678;0.04070062480266829763];
IW1_1 = [0.024051635237480276791 0.049373586742733746591 0.11647622048664928174 -0.056696099214865215699 -0.176624879374381899 -0.12988530848510562721 -0.11735120731100864844 -0.019912394554039945793;-0.39714363004113834021 -0.23611265006798282107 0.33193533298362354333 0.012972329098299846886 -0.076630340112690237264 -0.022126944816026269947 -0.34904984311146808329 -0.22591687196737461618;0.39112858495334346109 -0.38693244960301409474 -0.31128923928212620664 -0.21106275615034508775 -0.4813796805359077946 0.34617967504720403848 0.30643455481376979943 0.080702363517638847634;0.52478475403036550784 0.37830889098085318523 -0.45850269727200648751 0.03162996651988090463 0.36857479670392923055 0.13476310683321868211 0.51791354501776343255 0.43157477063661081607;-0.20949097886810821856 0.32603864164436097139 0.24020641691285321562 0.18600161365101283706 0.38856061458440710465 -0.23175856373248687747 -0.26851884611642778955 -0.054650380467711694166];
IW1_2 = [0.13067538201803630127 -0.47729242434975738263 -0.31892441858170078595 0.018820626511681197435 -0.028829244640747573453 0.074649973939357808228;0.25455407368713545146 0.18927901092516793979 -0.24848066794719445016 0.50594345524968209471 -0.48147286741533229515 0.18985465131574849607;2.5649454753601759194 -0.037990661686653270923 0.24281524282820945992 -2.4575284354162545419 -0.01936414323015552344 -0.32462142538749538812;-0.26861534325112201849 0.67642629256034991769 -0.52864159165439861265 -0.58872293193740299344 0.57440908724707562261 0.19821320592788205239;-1.0195216602200851685 -0.49802398600740399592 0.36630554949751154004 1.3869144085536115885 0.32141506965672816953 -0.021350833552414346522];

% Layer 2
b2 = [0.052453017956199735061;0.15456136019522745406;-0.074399842180574049522];
LW2_1 = [0.17607541928575548562 1.2510673921123467434 1.1499981490726889355 0.61281629340438625864 1.0731417123103861311;-1.482507399315706742 0.98690088906846007433 -0.24346966490781613013 0.25066226497161731013 -0.64155289110740709724;-1.8517796592106219311 -0.93678286239303121263 0.38793681812102370765 -0.82466602023629309581 0.5998328203472120812];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(4,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),8,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
