function [y1,xf1,xf2] = middle_bm_nnm_exp2(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP2 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:54:48.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp2(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 5xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 5x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 5x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.238720341550661;-0.147308733157714;-0.140525679064752;-0.0720088121554134;-0.0549787840908177];
x1_step1.gain = [4.05906800162919;8.24650246002704;7.3153639340754;14.1200062740119;14.3198544238042];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];
x2_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.11656050382008931177;0.080898961669703811639;-0.030397967425334557201;-0.062502512342199917361;0.092038129469001764282];
IW1_1 = [-0.14237326390327534331 -0.2915207523780523613 0.28797391378567688269 -0.24464731786953022863 -0.2440228645792258122 0.092511427766109974313 0.45630347415882821505 -0.058867904279961635883 0.24549413040706449807 0.10777442061171214893;-0.17888558306872742731 -1.5805139238266969759 -0.17258343971540110462 -1.0135666193589933926 0.62943540252153085124 0.40875764180837625972 1.6235947894906987976 0.083118494792011429761 0.79689047663154966017 -0.31114818396956644975;0.33862730182226219444 0.50929410136633745942 -0.47447534451036393888 0.36041736349677627738 0.21202176584525420089 -0.31369288408798357004 -0.73095909058471697506 0.088258606651536078425 -0.30658213193035749322 0.00027924909537095404972;-0.21849756556901764326 -0.30439867882033067037 0.31581235458401096805 -0.16402284855146800902 -0.26375315803166660134 0.1791733931326885132 0.46739015944886408427 -0.084286579660371840905 0.17918366451317715993 0.11429596635368470536;0.35701526500560210042 1.6124115970547538979 -0.29945057119388934774 1.0908445003682178953 -0.1798103285360722059 -0.47010363314199615781 -1.8719826425452286145 0.041150593293713046139 -0.92708786980472424055 0.1317581255745806923];
IW1_2 = [-0.40235011825772748484 -0.074520452087599081681 -0.29355703422505857736 0.33939341954959861836 -0.27072789517911188817 0.31165173027041837006;1.5871686049459770018 -0.03496405680413238598 -0.057760456287018473176 -1.3116383197529031257 0.25527114471500045312 0.0632572707681327423;0.96370723571817318298 -1.3742165994930242157 0.6357417793116447724 -0.63852537449919632984 1.0156597622779839352 -0.74774204712012837248;-0.87384813327039390085 0.80852708264665407167 0.3595615444874983857 0.57026195425106562809 -0.58769320065533114938 0.15297689076202297676;0.072761561281981926297 -0.54323653575937591587 0.11483655895170390149 0.20513136944755305802 0.43852094069021696487 -0.41654852449022244931];

% Layer 2
b2 = [-0.18364892603552451789;-0.23414123612771328697;0.083205884196682761145];
LW2_1 = [2.7161618466752868173 3.1656430801427992705 -0.54332665218604903057 2.1478352100198483399 4.0493774235934418826;-0.93225660423122458376 0.76484333317698727228 -1.2342201217061441465 0.59828409897937795403 1.1230612981540522011;0.3239717017443710656 0.68382442063005033361 1.287700247452769009 2.3226797577987028376 0.64681096588601372233];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0198931201438839;0.045147174777309;0.0643454772835516];
y1_step1.xoffset = [-42.35398667;-25.03195236;-5.972213304];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(5,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
