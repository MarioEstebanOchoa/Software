function [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:48:36.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.408452786999554;-0.263333821349932;-0.139058055166765];
x1_step1.gain = [2.37715946826089;4.07217099049612;6.85986423641121];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.19014799152839900742;-0.0046258990027024235112;-0.073399257990308983124;0.077705826108871126068;-0.12197627192119686601];
IW1_1 = [-0.14934581186275111553 1.9850659168912310193 0.74566248077789143434 -0.33981912750792359068 -1.0775328687039920084 -0.42400943189368650588;-0.0011121363297316565893 0.4146353720484693417 -0.07524393589012687289 0.32595643070110502659 0.17526911073651690876 -0.0034106666142895564198;0.012672668960655201001 -1.1570144631057450724 -0.31725725608720828363 -0.1017931155196506593 0.35608651767584437176 0.24086182411469944653;-0.016632935301546192264 -0.15588648756215400804 -0.0031634322143375241676 0.008305090527143820997 -0.034898781421252689228 -0.0028785652175267548852;-0.029647688306181828322 1.8847112214803638519 0.28932273505550465398 0.39496575235481357069 -0.43937370461518310272 -0.23294586558512983543];
IW1_2 = [2.5797339926844582436 1.7499898510805249607 0.18664571112104258455 -2.2153462775310361899 -0.60906479776358990463 0.027366163656663326786;-1.0570317121594279275 0.35962679709679823414 0.40349517262810685736 1.1476912137856876139 0.20068823517619338581 -0.19908614969260401972;0.019143908376234308744 -0.30673288852980157282 0.058251318201049374912 -0.050349274463570854732 -0.1331820866557122951 0.018502184954417969648;0.084365560733492453438 -0.011965736631390531258 -0.64324029245831015889 -0.0055495906904160794207 -0.17827523685561807998 0.23766086899573293789;-1.4034193467266780075 2.1278915423430388998 0.35745884519756548903 1.2024612879661435993 -0.37359693318225412062 -0.13982634234116836369];

% Layer 2
b2 = [-0.011790577342431876259;0.22879651718371535329;0.16762145731060240639];
LW2_1 = [1.2743251460842544009 3.2418091935904485013 0.74226685087059340873 1.5769825752369841521 -1.5436122774058462781;0.41392279494564787612 0.24871400902500176433 1.872781993202188966 0.9389928016816815326 0.63368841097478301183;0.22598893742868420009 0.58160763627109934859 0.39724287013328063445 -1.9522021733581944591 -0.24865554456325933419];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
