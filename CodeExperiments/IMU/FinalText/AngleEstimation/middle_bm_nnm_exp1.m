function [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2)
%MIDDLE_BM_NNM_EXP1 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 16:58:53.
% 
% [y1,xf1,xf2] = middle_bm_nnm_exp1(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.408452786999554;-0.263333821349932;-0.139058055166765];
x1_step1.gain = [2.37715946826089;4.07217099049612;6.85986423641121];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];
x2_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.077577323529303077176;0.088953598444058604167;-0.11508510865909883647;-0.099505880074195071638;-0.038115387666723149485];
IW1_1 = [0.26177370614020872841 -0.84297446228623218456 -0.37649017914455867873 0.13923560914756108464 0.21415403203790225883 0.24604356076847472279;0.76436264560061384365 -1.9475335349430529241 -0.84844372794989653119 0.31252740155415198453 0.38329872887807525661 0.54429871849730548927;-0.20457383220978167526 0.47300401291261795489 -0.032521955725457921127 -0.27920927185345068011 -0.21113616064993837029 0.2097591614464979215;-0.41926288612341133799 1.0475666706009560958 0.36024164327114216455 -0.2937165425769795446 -0.33825163425263654604 -0.1469345420920255274;-0.27882966578877577124 0.53812625946667924648 0.50200489699758110707 0.10157875749339224936 0.076981237471208066592 -0.52043428018000914559];
IW1_2 = [-0.57363891341035877502 -0.15270893665294191233 0.0300100472324343788 0.15429411411827539946 -0.1819626610044196291 0.053233347346165652003;-1.2038718220148714177 -1.4682463984218518949 -0.8141691565242732409 0.083535978197980476079 -0.091561166592946413578 0.39465837529215663793;2.6766295890085771703 0.041105441015066912502 0.39829894405786847589 -2.0781840326450220502 0.22928977447970130821 -0.18420530812491192618;1.3170572823775723581 1.1177636450564982784 -0.14551433518681747281 -0.67850503627105196447 -0.18884998553963716628 0.038971911763788474881;-0.71759527521775468006 0.49759855460446772435 0.58508214950921488828 1.4022737859938549931 0.029602416630969213829 -0.25542739480092679916];

% Layer 2
b2 = [0.2153084601405971521;-0.0086141255967882475464;-0.12198346183400825271];
LW2_1 = [-0.45262591798399465226 1.7797551566366704989 1.3820558951385042423 1.2641665943109514636 1.9452113220975988384;2.1892506154371256244 0.16184693644304010141 -0.19849850282079312125 1.6993808181982146266 0.39956014973267378609;1.4768349932058169038 -1.6513938139359893853 0.42743217229340951802 -1.7884794666348784453 -0.46573090164852681827];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0211267846895733;0.0395706711489379;0.0871775967713017];
y1_step1.xoffset = [-34.05729511;-56.20691974;-10.00403908];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
