function [y1,xf1,xf2] = index_bm_nnm_exp6(x1,x2,xi1,xi2)
%INDEX_BM_NNM_EXP6 neural network simulation function.
%
% Auto-generated by MATLAB, 19-Sep-2019 17:30:21.
% 
% [y1,xf1,xf2] = index_bm_nnm_exp6(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 6xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 6x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 6x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-33.7406296948085;-57.1221176756341;-19.7284169437486;-33.7618349904975;-57.8590179250591;-19.3952408506384];
x1_step1.gain = [0.0206602845294696;0.0415964149107798;0.0449097649882465;0.0210934199245808;0.0416736727331636;0.0465066896592033];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];
x2_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.16780287494920539948;0.38075181884286479761;-0.10963525315245378766;0.044665437058858281638];
IW1_1 = [-0.11158580582375152157 0.050988039973548934802 -0.13901393933413191961 0.41484059546790807982 0.039827193166499567922 0.22970322755184349739 0.0028202566840649233477 0.041688385163063688965 -0.0055199032128017064269 -0.031648412899157388201 -0.0066517554287469516511 0.0079011021528616800363;-0.10169095408159610494 0.17773221324944937782 -0.16748948552893550001 0.33568484113590191242 -0.67150971803433179286 -0.36836143267964649439 -0.1902391099033371169 0.018977808378765406716 -0.3234266147242670919 0.14463067911365651286 -0.081116909386307847751 0.32081670966247316512;0.2673683048321901512 -0.23659898022612654844 0.38067036437115819858 -1.0150858398237108116 0.85636634484294016367 -0.0057912554365790180899 0.30910231101241553153 -0.22409560116188131929 0.28267273215008004161 -0.19776085682924243736 0.35391007604618268667 -0.15270849989337906272;-0.11038898698210537763 0.22768475563471624046 -0.32357598212840288365 1.079567186713775051 -0.44962472449059170954 0.32802819799217797225 -0.032925224040222515753 0.30440731617492849947 0.00053921313891220387215 0.072180068553542572896 -0.24837553388493857631 0.038387144973738601683];
IW1_2 = [0.76059092579706233384 0.39178701312492031361 0.85560017128938925524 -0.55723842261115363872 -0.18178978372823220711 -0.32304059743274510241;0.90326596034956530001 -0.46863235427886451578 0.74226846044381955547 -0.73633197496631919154 0.73795710980256667977 0.36241539963092445076;-1.0416074426596484415 0.037795417865531304169 0.77995517297359417963 1.3732743972339551686 -0.81817139818210882218 -1.4171319923933745066;0.050707385208117926323 0.61206011510331748138 -0.26526440513413485078 -1.0853193222332195855 0.022469912209569755518 0.62350425235077633346];

% Layer 2
b2 = [-0.028592335517160300667;0.29617967804181777325;-0.39278345065086339716];
LW2_1 = [1.4086164664051907813 -0.81183053049934450485 -1.646720059056907326 -1.6226883267038607617;1.0819411185317286961 -1.6565874701742824282 -0.27349579374244248342 0.46736724856559691554;-0.0078997137298773677933 1.379858166536586106 1.5075293037976196242 0.87450405212073289984];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0209968573482885;0.041868259268193;0.0430280155650301];
y1_step1.xoffset = [-34.63462114;-56.51672659;-19.90957524];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(6,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),12,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
