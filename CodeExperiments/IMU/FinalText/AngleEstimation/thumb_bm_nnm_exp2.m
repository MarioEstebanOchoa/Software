function [y1,xf1,xf2] = thumb_bm_nnm_exp2(x1,x2,xi1,xi2)
%THUMB_BM_NNM_EXP2 neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2019 14:56:04.
% 
% [y1,xf1,xf2] = thumb_bm_nnm_exp2(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.417033374379435;-0.233340177699225;-0.152979659687625];
x1_step1.gain = [3.24426026057652;4.16098014524691;6.45037721182388];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-4.60253906;8.007185151;25.69303831];
x2_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
x2_step1.ymin = -1;

% Layer 1
b1 = [0.20643013555679246007;-0.30948916399982812075;-0.12534470973608155542;0.0060135850178918625816;0.15149969315765368649];
IW1_1 = [-0.27273898014457309547 -0.26701627819873363645 0.09121600437988633403 0.15915614470361011401 0.083315498427202178133 0.089337210444282458277;0.80495036507221806588 0.85707790641419590028 -0.25497485367011762936 -0.66882993661080147874 -0.49764475463354207463 -0.10200859703118843325;0.32206569773540250079 0.76457736461978831333 -0.37655631553390067623 -0.19218484260781226736 -0.62033713343012852892 0.10951034951630914116;-0.12114793050846815736 -0.35217725573500557879 0.2699478951754089584 0.028923681594550408602 0.40247266529864539342 -0.086118291053549470004;0.09473188051126332776 0.24475213380407548347 -0.17763990106719135253 -0.036792485856972680092 -0.31009554342129658222 0.053213745863172054462];
IW1_2 = [-0.60542318572561282242 0.32141422633626187677 -0.74280869391342252417 0.62723575487939942086 -0.69850872877522129922 0.47377056371375797506;2.7446231408448893418 -0.5206653123174740383 -0.033052514193884267868 -2.0305491110555733414 0.9634496096744467053 -0.27200658999681637251;0.81901650274037818278 -0.89236962919372886383 0.011274286459406337307 -0.66642931450432119078 1.0423475123327050618 -0.34270809053419409862;0.36208162902375706782 1.6328872543936712169 -1.0264300485183912581 -0.34701428584073717998 -1.2564407090331042305 0.76207368684751186638;0.27992189907487891043 -0.87041852951959075568 0.14439739681834753982 0.00062296624277972197006 0.79770254647185256935 -0.24492980978287798299];

% Layer 2
b2 = [-0.26399272040927168614;-0.28497703310994770831;-0.039629637624013253072];
LW2_1 = [0.38785570518828538233 0.95922527818812719502 -1.7560084210485760181 0.09164643953135892529 1.94563775946084494;-1.9831544264096743202 -1.0895784263165644301 0.15088366527089686064 2.2780926247576589461 2.4546538641155337679;-1.2173408227111603974 0.19310303087995450699 -1.792742488039416715 -0.6475404054711206836 0.72819363926228630746];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0354831019441904;0.0377222788091497;0.0621721513247483];
y1_step1.xoffset = [-4.60253906;8.007185151;25.69303831];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
